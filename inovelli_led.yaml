alias: Inovelli LED Settings and Effects
description: 'Handles setting the LED colors and notifications on Inovelli "Red" and "Blue" model switches and dimmers through the Zwave JS and zigbee2mqtt integrations'
############
# Caculations: https://docs.google.com/spreadsheets/d/14wTP4OL4hkDK3Et5kYL4fyxPIK_R9JR3cgFxSa6dhyw/edit?usp=sharing
#   Note that the on/off LZW30-SN switch has 1 fewer effect, which makes its math slightly different than the dimmers or other devices with a full LED bar.
#
# Required for setting the LED indicator
#   LEDcolor: (int or string) Sets color of LED status and must be one of: Off, Red, Orange, Yellow, Green, Cyan, Teal, Blue, Purple, Light Pink, Pink, White
#     Note that the Blue 2-in-1 switch/dimmer supports separate colors for on and off; but currently this just sets them both to whatever color is selected
#   LEDbrightness: (whole integer 1 – 10) Sets the brightness of the LED status when on.
#   LEDbrightness_off: (whole integer 1 – 10) Sets the brightness of the LED status when off.
#
# Required for setting LED effects
#   duration: (string or whole integer of seconds) Either "Off", an integer of seconds, or a whole integer followed by "Second", "Seconds", "Minute", or "Minutes", "Hour", "Hours", "Indefinitely", or "Forever".
#   effect: (string) One of: "Off", "Solid", "Chase" (not available on switches), "Fast Blink", "Slow Blink", "Blink", or "Pulse".
#   brightness: (integer 1 – 10) Sets the brightness of the LED's effect
#   color: (string) Sets color of LED effect and must be one of: Off, Red, Orange, Yellow, Green, Cyan, Teal, Blue, Purple, Light Pink, Pink, White
############
mode: parallel
max: 100 # Default max is 10, which might be an issue if you have a lot of switches

fields:
  area:
    name: Area
    description: Area names or IDs containing Inovelli devices.
    required: no
    example: "['Family Room']"
    selector:
      area:
        multiple: true
        device:
          - integration: zwave_js
            manufacturer: Inovelli
            model: LZW36, LZW30-SN, LZW31-SN
          - integration: mqtt
            manufacturer: Inovelli
            model: Inovelli 2-in-1 switch + dimmer (VZM31-SN)

  group:
    name: Group
    description: Group IDs for groups containing Inovelli LZW36, LZW30-SN, LZW31-SN devices.  Mix and match types as you like
    required: no
    example: "['0249abdc634c12cbf6cdc06d7a507495']"
    selector:
      entity:
        multiple: true
        filter:
          - domain:
              - fan
              - light
              - switch

  device:
    name: Device
    description: Device IDs for Inovelli LZW36, LZW30-SN, LZW31-SN, VZM31-SN device IDs.  Mix and match types as you like
    required: no
    example: "['0249abdc634c12cbf6cdc06d7a507495']"
    selector:
      device:
        multiple: true
        filter:
          - integration: zwave_js
            manufacturer: Inovelli
            model: LZW36
          - integration: zwave_js
            manufacturer: Inovelli
            model: LZW30-SN
          - integration: zwave_js
            manufacturer: Inovelli
            model: LZW31-SN
          - integration: mqtt
            manufacturer: Inovelli
            model: Inovelli 2-in-1 switch + dimmer (VZM31-SN)

  entity:
    name: Entity
    description: The light.*, switch.*, or fan.* entity for the LED we're setting.  Can be a comma separated list. Mix and match types as you like.
    required: no
    example: light.office, fan.guest_room
    selector:
      entity:
        multiple: true
        filter:
          - domain:
              - fan
              - light
              - switch
            #model: LZW36 # Device model should really be an option for entities.

  LEDcolor:
    name: LED Color (non-effect)
    description: Sets the color of the LED status, which indicates brightness levels
    required: no
    example: Blue
    selector:
      select:
        options:
          - "Off"
          - Red
          - Orange
          - Yellow
          - Green
          - Cyan
          - Teal
          - Blue
          - Purple
          - Light Pink
          - Pink
          - Hot Pink
          - White

  LEDbrightness:
    name: LED Brightness On (non-effect)
    description: Sets the brightness of the LED status when on. 0 means off
    required: no
    example: 6
    selector:
      number:
        min: 0
        max: 10
        step: 1
        mode: slider

  LEDbrightness_off:
    name: LED Brightness When Off (non-effect)
    description: Sets the brightness of the LED status when off. 0 means off
    required: no
    example: 2
    selector:
      number:
        min: 0
        max: 10
        step: 1
        mode: slider

  duration:
    name: Duration of Effect
    description: How long the effect will last.
    required: no
    example: Off
    selector:
      select:
        options:
          - "Off"
          - Forever
          - 1 Second
          - 2 Seconds
          - 3 Seconds
          - 4 Seconds
          - 5 Seconds
          - 6 Seconds
          - 7 Seconds
          - 8 Seconds
          - 9 Seconds
          - 10 Seconds
          - 15 Seconds
          - 20 Seconds
          - 25 Seconds
          - 30 Seconds
          - 35 Seconds
          - 40 Seconds
          - 45 Seconds
          - 50 Seconds
          - 55 Seconds
          - 60 Seconds
          - 2 Minutes
          - 3 Minutes
          - 4 Minutes
          - 5 Minutes
          - 6 Minutes
          - 7 Minutes
          - 8 Minutes
          - 9 Minutes
          - 10 Minutes
          - 15 Minutes
          - 30 Minutes
          - 45 Minutes
          - 1 Hour
          - 2 Hours
          - indefinitely

  effect:
    name: Effect
    description: Type of effect
    required: no
    example: Pulse
    selector:
      select:
        options:
          - "Off"
          - Solid
          - Chase
          - Fast Blink
          - Slow Blink
          - Blink
          - Pulse

  brightness:
    name: Effect Brightness
    description: Sets the brightness of the LED's effect.  0 means off
    required: no
    example: 8
    selector:
      number:
        min: 0
        max: 10
        step: 1
        mode: slider

  color:
    name: Effect Color
    description: Color of LED effect
    required: no
    example: Red
    selector:
      select:
        options:
          - "Off"
          - Red
          - Orange
          - Yellow
          - Green
          - Cyan
          - Teal
          - Blue
          - Purple
          - Light Pink
          - Pink
          - Hot Pink
          - White


variables:
##################
# Look-up tables for easy reference and future maintenance.
##################
  color_set:
    "off": 0
    "red": 0
    "orange": 8
    "yellow": 42
    "green": 85
    "cyan": 127
    "teal": 145
    "blue": 170
    "purple": 195
    "light pink": 220
    "pink": 234
    "hot pink": 234
    "white": 255

  duration_values:
    "off": 0
    "1 second": 1
    "1 seconds": 1
    "2 seconds": 2
    "3 seconds": 3
    "4 seconds": 4
    "5 seconds": 5
    "6 seconds": 6
    "7 seconds": 7
    "8 seconds": 8
    "9 seconds": 9
    "10 seconds": 10
    "15 seconds": 15
    "20 seconds": 20
    "25 seconds": 25
    "30 seconds": 30
    "35 seconds": 35
    "40 seconds": 40
    "45 seconds": 45
    "50 seconds": 50
    "55 seconds": 55
    "60 seconds": 60
    "1 minute": 60
    "1 minutes": 60
    "2 minutes": 62
    "3 minutes": 63
    "4 minutes": 64
    "5 minutes": 65
    "6 minutes": 66
    "7 minutes": 67
    "8 minutes": 68
    "9 minutes": 69
    "10 minutes": 70
    "15 minutes": 75
    "30 minutes": 90
    "45 minutes": 105
    "60 minutes": 120
    "1 hour": 120
    "2 hours": 122
    "forever": 255
    "indefinitely": 255

  switch_effects:
    "off": 0
    "solid": 1
    "fast blink": 2
    "chase": 2
    "slow blink": 3
    "blink": 3
    "pulse": 4

  strip_effects:
    "off": 0
    "solid": 1
    "chase": 2
    "fast blink": 3
    "slow blink": 4
    "blink": 4
    "pulse": 5

##################
# Store model names for RED and BLUE versions for reference and validation checks if necessary
##################
  zwave_models: # RED
    - LZW31-SN # dimmer
    - LZW30-SN # switch
    - LZW36 # combo_light, combo_fan
  zigbee_models: # BLUE
    - Inovelli 2-in-1 switch + dimmer (VZM31-SN) # blue_dimmer_switch

##################
# Allowed domains to limit which types of entities are processed
##################
  allowed_domains:
    - fan
    - light
    - switch

##################
# There's a lot of redundancy here, but it should be easy to update if parameter names change for one model and not another
##################
  parameters:
    "dimmer_effect_bulk": 16
    "dimmer_effect_color": "LED Indicator: Effect Color"
    "dimmer_effect_brightness": "LED Indicator: Effect Brightness"
    "dimmer_effect_duration": "LED Indicator: Effect Duration"
    "dimmer_effect_effect": "LED Indicator: Effect Type"
    "dimmer_ledcolor": "LED Indicator: Color"
    "dimmer_ledbrightness": "LED Indicator: Brightness When On"
    "dimmer_ledbrightness_off": "LED Indicator: Brightness When Off"

    "switch_effect_bulk": 8
    "switch_effect_color": "LED Effect Color"
    "switch_effect_brightness": "LED Effect Brightness"
    "switch_effect_duration": "LED Effect Duration"
    "switch_effect_effect": "LED Effect Type"
    "switch_ledcolor": "LED Indicator Color"
    "switch_ledbrightness": "LED Indicator Brightness"
    "switch_ledbrightness_off": "LED Indicator Brightness When Off"

    "combo_light_effect_bulk": 24
    "combo_light_effect_color": "Light LED Effect Color"
    "combo_light_effect_brightness": "Light LED Effect Brightness"
    "combo_light_effect_duration": "Light LED Effect Duration"
    "combo_light_effect_effect": "Light LED Effect Type"
    "combo_light_ledcolor": "Light LED Indicator Color"
    "combo_light_ledbrightness": "Light LED Strip Brightness"
    "combo_light_ledbrightness_off": "Light LED Strip Brightness When Off"

    "combo_fan_effect_bulk": 25
    "combo_fan_effect_color": "Fan LED Effect Color"
    "combo_fan_effect_brightness": "Fan LED Effect Brightness"
    "combo_fan_effect_duration": "Fan LED Effect Duration"
    "combo_fan_effect_effect": "Fan LED Effect Type"
    "combo_fan_ledcolor": "Fan LED Indicator Color"
    "combo_fan_ledbrightness": "Fan LED Strip Brightness"
    "combo_fan_ledbrightness_off": "Fan LED Strip Brightness When Off"

##################
# Working through provided areas, devices, and entities to group them into devices types.
##################
  area: '{{ area|default("invalid")|lower }}'
  group: '{{ group|default("invalid")|lower }}'
  device: '{{ device|default("invalid")|lower }}'
  entity: '{{ entity|default("invalid")|lower }}'

  entities_from_area: >
    {% set area_array = namespace(area_list=[]) %}
    {% set entities = namespace(entities=[]) %}
    {% if area != 'invalid' %}
      {% if area == 'all' %}
        {% set area_array.area_list = areas() %}
      {# Converting to a list #}
        {% elif ',' in area %}
          {% set areanum = area.split( ',' ) | count %}
          {% for i in range(0,areanum) %}
            {% set area_array.area_list = area_array.area_list + [area.split( ',' )[i]|string|trim ] %}
          {% endfor %}
        {% elif area[0]|count == 1 %} {# if the first item in the list has only a single character, it isn't a valid list #}
          {% set area_array.area_list = area_array.area_list + [area|string|trim] %}
        {% else %}
          {% set area_array.area_list = area %}
      {% endif %}
      {# Detecting entities #}
      {% for area in area_array.area_list %}
        {% for ent in area_entities(area) %}
          {% if ent.split('.')[0] in allowed_domains %}
            {% set entities.entities = entities.entities + [ent|string|trim] %}
          {% endif %}
        {% endfor %}
      {% endfor %}
    {% endif %}
    {{ entities.entities|lower }}
  entities_from_group: >
    {% set group_array = namespace(group_list=[]) %}
    {% set entities = namespace(entities=[]) %}
    {% if group != 'invalid' %}
      {# Converting to a list #}
      {% if ',' in group %}
        {% set groupnum = group.split( ',' ) | count %}
        {% for i in range(0,groupnum) %}
          {% set group_array.group_list = group_array.group_list + [group.split( ',' )[i]|string|trim ] %}
        {% endfor %}
      {% elif group[0]|count == 1 %} {# if the first item in the list has only a single character, it isn't a valid list #}
        {% set group_array.group_list = group_array.group_list + [group|string|trim] %}
      {% else %}
        {% set group_array.group_list = group %}
      {% endif %}
      {# Detecting entities #}
      {% for group in group_array.group_list %}
        {% for entity in expand(group) %}
          {% set ent = entity.entity_id %}
          {% if ent.split('.')[0] == 'light' %}
            {% if ent.split('.')[0] in allowed_domains %}
              {% set entities.entities = entities.entities + [ent|string|trim] %}
            {% endif %}
          {% endif %}
        {% endfor %}
      {% endfor %}
    {% endif %}

    {{ entities.entities|lower }}
  entities_from_device: >
    {% set devices = namespace(devices=[]) %}
    {% set entities = namespace(entities=[]) %}
    {% if device != 'invalid' %}
      {# Converting to a list #}
      {% if ',' in device %}
        {% set devicenum = device.split( ',' ) | count %}
        {% for i in range(0,devicenum) %}
          {% set devices.devices = devices.devices + [device.split( ',' )[i]|string|trim ] %}
        {% endfor %}
        {% elif device[0]|count == 1 %} {# if the first item in the list has only a single character, it isn't be a valid list #}
          {% set devices.devices = devices.devices + [device|string|trim] %}
        {% else %}
          {% set devices.devices = device %}
      {% endif %}
      {# Detecting entities #}
      {% for device in devices.devices %}
        {% for ent in device_entities(device) %}
          {% if ent.split('.')[0] in allowed_domains %}
            {% set entities.entities = entities.entities + [ent|string|trim] %}
          {% endif %}
        {% endfor %}
      {% endfor %}
    {% endif %}
    {{ entities.entities|lower }}
  entities_from_entity: >
    {% set entities_array = namespace(entities=[]) %}
    {% set entities = namespace(entities=[]) %}
    {% if entity != 'invalid' %}
      {# Converting to a list #}
      {% if ',' in entity %}
        {% set entitynum = entity.split( ',' ) | count %}
        {% for i in range(0,entitynum) %}
          {% set entities_array.entities = entities_array.entities + [entity.split( ',' )[i]|string|trim ] %}
        {% endfor %}
        {% elif entity[0]|count == 1 %} {# if the first item in the list has only a single character, it isn't be a valid list #}
          {% set entities_array.entities = entities_array.entities + [entity|string|trim] %}
        {% else %}
          {% set entities_array.entities = entity %}
      {% endif %}
      {# Detecting entities #}
      {% for ent in entities_array.entities %}
        {% if ent.split('.')[0] in allowed_domains %}
          {% set entities.entities = entities.entities + [ent|string|trim] %}
        {% endif %}
      {% endfor %}
    {% endif %}
    {{ entities.entities|lower }}

  all_selected_entities: >
    {{ entities_from_area + entities_from_group + entities_from_device + entities_from_entity }}

sequence:

##################
# Cleaning up inputs; using lower case since it's able to handle capital letters in the middle of mistyped and camelcase words like "LightPink".
# Brightness variables are set to 11 so they're skipped in the logic.  To turn the LED off, use "Off".
##################
  - variables:
      color: '{{ color|default("no change")|lower }}'
      duration: '{{ duration|default("invalid")|lower }}'
      brightness: '{{ brightness|default("11")|int }}'
      effect: '{{ effect|default("off")|lower }}'
      LEDcolor: '{{ LEDcolor|default("no change")|lower }}'
      LEDbrightness: '{{ LEDbrightness|default("11")|int }}'
      LEDbrightness_off: '{{ LEDbrightness_off|default("11")|int }}'

##################
# Group all selected entities by device type so the right integration and parameters can be used
##################
  - repeat:
      for_each:
        - device_type: dimmer
          call_type: zwave_js
          entities: >
            {% set entities = namespace(entities=[]) %}
            {% for ent in all_selected_entities %}
              {% if is_device_attr(ent,'model','LZW31-SN') and ent.split('.')[0] == 'light' %}
                {% set entities.entities = entities.entities + [ent] %}
              {% endif %}
            {% endfor %}
            {{ entities.entities }}
        - device_type: switch
          call_type: zwave_js
          entities: >
            {% set entities = namespace(entities=[]) %}
            {% for ent in all_selected_entities %}
              {% if is_device_attr(ent,'model','LZW30-SN') and ent.split('.')[0] == 'switch' %}
                {% set entities.entities = entities.entities + [ent] %}
              {% endif %}
            {% endfor %}
            {{ entities.entities }}
        - device_type: combo_light
          call_type: zwave_js
          entities: >
            {% set entities = namespace(entities=[]) %}
            {% for ent in all_selected_entities %}
              {% if is_device_attr(ent,'model','LZW36') and ent.split('.')[0] == 'light' %}
                {% set entities.entities = entities.entities + [ent] %}
              {% endif %}
            {% endfor %}
            {{ entities.entities }}
        - device_type: combo_fan
          call_type: zwave_js
          entities: >
            {% set entities = namespace(entities=[]) %}
            {% for ent in all_selected_entities %}
              {% if is_device_attr(ent,'model','LZW36') and ent.split('.')[0] == 'fan' %}
                {% set entities.entities = entities.entities + [ent] %}
              {% endif %}
            {% endfor %}
            {{ entities.entities }}
        - device_type: blue_dimmer_switch
          call_type: z2m
          entities: >
            {% set entities = namespace(entities=[]) %}
            {% for ent in all_selected_entities %}
              {% if is_device_attr(ent,'model','Inovelli 2-in-1 switch + dimmer (VZM31-SN)') and ent.split('.')[0] == 'light' %}
                {% set entities.entities = entities.entities + [ent] %}
              {% endif %}
            {% endfor %}
            {{ entities.entities }}
      sequence:

##################
# Do not continue if we don't have at least one entity of this type
##################
        - condition: template
          value_template: |
            {{ repeat.item.entities |count >0 }}


##################
# LED strip color
##################
        - choose:
          - conditions: >
              {{ LEDcolor != "no change" }}
            sequence:
              - choose:
                - conditions: "{{ repeat.item.call_type == 'zwave_js' }}"
                  sequence:
                    # Zwave JS
                    - service: zwave_js.set_config_parameter
                      data:
                        entity_id: '{{ repeat.item.entities }}'
                        parameter: |
                          {% set effect_param = repeat.item.device_type + '_ledcolor' %}
                          {{ parameters[effect_param] }}
                        value: |
                          {{ color_set[LEDcolor] }}
              - choose:
                - conditions: "{{ repeat.item.call_type == 'z2m' }}"
                  sequence:
                    # Zigbee2mqtt
                    - repeat:
                        for_each: >
                          {{ repeat.item.entities }}
                        sequence:
                          - service: mqtt.publish
                            data:
                              topic: zigbee2mqtt/{{ states[repeat.item].attributes.friendly_name }}/set
                              payload: >-
                                { "ledColorWhenOn": {{ color_set[LEDcolor] }}, "ledColorWhenOff": {{ color_set[LEDcolor] }} }

##################
# LED strip brightness
##################
        - choose:
          - conditions: >
              {{ LEDbrightness is defined and LEDbrightness != 11 }}
            sequence:
              - choose:
                - conditions: "{{ repeat.item.call_type == 'zwave_js' }}"
                  sequence:
                    # Zwave JS
                    - service: zwave_js.set_config_parameter
                      data:
                        entity_id: '{{ repeat.item.entities }}'
                        parameter: |
                          {% set effect_param = repeat.item.device_type + '_ledbrightness' %}
                          {{ "off" if parameters[effect_param] == 0 else parameters[effect_param] }}
                        value: |
                          {{ LEDbrightness }}
              - choose:
                - conditions: "{{ repeat.item.call_type == 'z2m' }}"
                  sequence:
                    # Zigbee2mqtt
                    - repeat:
                        for_each: >
                          {{ repeat.item.entities }}
                        sequence:
                          - service: mqtt.publish
                            data:
                              topic: zigbee2mqtt/{{ states[repeat.item].attributes.friendly_name }}/set
                              payload: >-
                                { "ledIntensityWhenOn": {{ (LEDbrightness * 256 / 10) }} }

##################
# LED strip brightness when off
##################
        - choose:
          - conditions: >
              {{ LEDbrightness_off is defined and LEDbrightness_off != 11 }}
            sequence:
              - choose:
                - conditions: "{{ repeat.item.call_type == 'zwave_js' }}"
                  sequence:
                    # Zwave JS
                    - service: zwave_js.set_config_parameter
                      data:
                        entity_id: '{{ repeat.item.entities }}'
                        parameter: |
                          {% set effect_param = repeat.item.device_type + '_ledbrightness_off' %}
                          {{ "off" if parameters[effect_param] == 0 else parameters[effect_param] }}
                        value: |
                          {{ LEDbrightness_off }}
              - choose:
                - conditions: "{{ repeat.item.call_type == 'z2m' }}"
                  sequence:
                    # Zigbee2mqtt
                    - repeat:
                        for_each: >
                          {{ repeat.item.entities }}
                        sequence:
                          - service: mqtt.publish
                            data:
                              topic: zigbee2mqtt/{{ states[repeat.item].attributes.friendly_name }}/set
                              payload: >-
                                { "ledIntensityWhenOn": {{ (LEDbrightness_off * 256 / 10) }} }

#################
# Effects (fully defined)
# Calling a bulk set of parameters reduces Z-Wave traffic and writes to the switch's NVRAM, extending its life(?)
##################
        - choose:
          - conditions: >
              {{ effect != "off" and
                 color != "no change" and
                 duration != "invalid" and
                 brightness != 11 }}
            sequence:
              - choose:
                - conditions: "{{ repeat.item.call_type == 'zwave_js' }}"
                  sequence:
                    # Zwave JS
                    - service: zwave_js.bulk_set_partial_config_parameters
                      data:
                        entity_id: '{{ repeat.item.entities }}'
                        parameter: |
                          {% set bulk_param = repeat.item.device_type + '_effect_bulk' %}
                          {{ parameters[bulk_param] }}
                        value: |
                          {% if repeat.item.device_type == "switch" %}
                            {{ color_set[color] + (brightness * 256) + (duration_values[duration] * 65536) + (switch_effects[effect] * 16777216) }}
                          {% else %}
                            {{ color_set[color] + (brightness * 256) + (duration_values[duration] * 65536) + (strip_effects[effect] * 16777216) }}
                          {% endif %}
              - choose:
                - conditions: "{{ repeat.item.call_type == 'z2m' }}"
                  sequence:
                    # Zigbee2mqtt
                    - repeat:
                        for_each: >
                          {{ repeat.item.entities }}
                        sequence:
                          - service: mqtt.publish
                            data:
                              topic: zigbee2mqtt/{{ states[repeat.item].attributes.friendly_name }}/set
                              payload: >-
                                {"led_effect":{"color":"{{ color_set[color] }}","duration":"{{ duration_values[duration] }}","effect":"{{ effect | replace(' ', '_') }}","level":"{{ (brightness * 256 / 10) }}"}}

#################
# Effects (not fully defined)
# We could change aspects of the effect without knowing everything (e.g. change the brightness but not color).
#   It turns out that changing the color or brightness resets the duration, so I question the value here unless the duration is "forever".
##################
#              - service: zwave_js.set_config_parameter
#                data:
#                  entity_id: '{{ repeat.item.entities }}'
#                  parameter: |
#                    {% set effect_param = repeat.item.device_type + '_effect_color' %}
#                    {{ parameters[effect_param] }}
#                  value: |
#                    {{ color_set[color] }}
#              - service: zwave_js.set_config_parameter
#                data:
#                  entity_id: '{{ repeat.item.entities }}'
#                  parameter: |
#                    {% set effect_param = repeat.item.device_type + '_effect_brightness' %}
#                    {{ "off" if parameters[effect_param] == 0 else parameters[effect_param] }}
#                  value: |
#                    {{ brightness }}
#              - service: zwave_js.set_config_parameter
#                data:
#                  entity_id: '{{ repeat.item.entities }}'
#                  parameter: |
#                    {% set effect_param = repeat.item.device_type + '_effect_duration' %}
#                    {{ parameters[effect_param] }}
#                  value: |
#                    {{ duration_values[duration] }}
#              - service: zwave_js.set_config_parameter
#                data:
#                  entity_id: '{{ repeat.item.entities }}'
#                  parameter: |
#                    {% set effect_param = repeat.item.device_type + '_effect_effect' %}
#                    {{ parameters[effect_param] }}
#                  value: |
#                    {% if repeat.item == "switch" %}
#                      {{ switch_effects[effect] }}
#                    {% else %}
#                      {{ strip_effects[effect] }}
#                    {% endif %}

##################
# Default will be to clear the effect and set the duration to 1 second.
# Setting only the effect to "off" turned the LED off on LZW36 fan / light combos for the duration (which could be "forever").
#    This way it turns off for 1 sec before it returns to its default state, but until the min value for effect changes to 0 in the DB, that's the best I can do.
# This way, "forever" effects can be set, then easily cleared.
# It's also a safer way to fail since the worst case scenario is that an effect is cleared.
##################
          default:
            - choose:
                - conditions: "{{ repeat.item.call_type == 'zwave_js' }}"
                  sequence:
                    # Zwave JS
                    - service: zwave_js.set_config_parameter
                      data:
                        entity_id: '{{ repeat.item.entities }}'
                        parameter: |
                          {% set effect_param = repeat.item.device_type + '_effect_effect' %}
                          {{ parameters[effect_param] }}
                        value: 0
                    - service: zwave_js.set_config_parameter
                      data:
                        entity_id: '{{ repeat.item.entities }}'
                        parameter: |
                          {% set effect_param = repeat.item.device_type + '_effect_duration' %}
                          {{ parameters[effect_param] }}
                        value: 1
            - choose:
                - conditions: "{{ repeat.item.call_type == 'z2m' }}"
                  sequence:
                    # Zigbee2mqtt
                    - repeat:
                        for_each: >
                          {{ repeat.item.entities }}
                        sequence:
                          - service: mqtt.publish
                            data:
                              topic: zigbee2mqtt/{{ states[repeat.item].attributes.friendly_name }}/set
                              payload: >-
                                {"led_effect":{"duration":"1","effect":"clear"}}

# The code below was unnecessary service calls.
#           - service: zwave_js.set_config_parameter
#             data:
#               entity_id: '{{ repeat.item.entities }}'
#               parameter: |
#                 {% set effect_param = repeat.item.device_type + '_effect_color' %}
#                 {{ parameters[effect_param] }}
#               value: 0
#            - service: zwave_js.set_config_parameter
#              data:
#                entity_id: '{{ repeat.item.entities }}'
#                parameter: |
#                  {% set effect_param = repeat.item.device_type + '_effect_brightness' %}
#                  {{ parameters[effect_param] }}
#                value: 0
