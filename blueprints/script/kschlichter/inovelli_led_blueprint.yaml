############
# Forum: https://community.home-assistant.io/t/control-leds-and-led-effects-on-inovelli-red-and-blue-dimmers-switches-and-combo-fan-lights-by-area-group-device-or-entity/421862
# Github: https://github.com/kschlichter/Home-Assistant-Inovelli-Effects-and-Colors
# Caculations: https://docs.google.com/spreadsheets/d/14wTP4OL4hkDK3Et5kYL4fyxPIK_R9JR3cgFxSa6dhyw/edit?usp=sharing
#
# Setting the LED indicator
#   - LEDnumber: (Blue Series only; LED 1 .. LED 7 or All) Set to `all` to configure the whole LED bar (default if the parameter is left out) or configure a single LED.
#       If specific LEDs have been set, they'll need to be unset before the LED bar will show anything.  The easiest way is to call LEDnumber 'all' with LEDcolor 'all clear'.
#   - LEDcolor: (int or string) Sets color of the status LED.  If LEDcolor_off is defined and supported by the device, this is only used for "on" status.
#       If a "color set" is used like "all unicorn", LEDnumber cannot be set to "LED {n}"; "all" LEDs must be configured or none will be.
#   - LEDcolor_off: (Red 800 and Blue Series only; int or string) Sets color of status LED when off, for devices that support this feature.
#       Note that the Blue Series and Red 800 Series support separate colors for on and off while the Black 500 and Red 500 Series devices do not and will ignore the variable.
#       If a "color set" is used like "all unicorn", LEDnumber cannot be set to "LED {n}"; "all" LEDs must be configured or none will be.
#   - LEDbrightness: (float 0.0 – 10.0) Sets the brightness of the status LED.  If LEDbrightness_off is defined and supported by the device, this is only used for "on" status.
#       LEDbrightness is multiplied by 10 or rounded off for each device, depending on whether they support 0 – 100 or 0 – 10 brightness levels.  This was done for backwards compatibility with old automations.
#   - LEDbrightness_off: (float 0.0 – 10.0) (see note above) Sets the brightness of the status LED when off.
#
# Setting LED effects
#   duration: (required; string or whole integer of seconds) Either "Off", an integer of seconds, or a whole integer followed by "Seconds", "Minutes", "Hours", "Indefinitely", or "Forever".
#   effect: (required; string) Where older devices don't support a new effect, that effect has been mapped to something that is supported.
#   brightness: (required; float 1 – 10) Sets the brightness of the LED's effect
#   color: (required; string) Sets color of LED effect.
#   LEDnumber: (optional; LED 1 .. LED 7 or All)Set to `all` to configure the whole LED bar (default if the parameter is left out) or configure a single LED.
#     If specific LEDs have been set, they'll need to be unset before the LED bar will show anything.  The easiest way is to call LEDnumber 'all' with LEDcolor 'all clear'.

#
# Effects not working?
#   Black 500 Series devices do not support effects.
#   Check that your device supports the effect you're selecting at https://inovelliusa.github.io/inovelli-switch-toolbox/
#
# Convert to blueprint:
#   Switch blueprint: and script alias: lines
#   Add two spaces to lines between floor: and variables: 68,483s
#   Comment out example:
#   Switch input_* and script variables in all three locations
#
# Zigbee2MQTT devices: https://www.zigbee2mqtt.io/supported-devices/#v=Inovelli
# ZHA LED config: https://community.inovelli.com/t/setting-blue-series-led-color-and-brightness-non-effect-in-home-assistant-zha/16417
# ZHA quirks: https://github.com/zigpy/zha-device-handlers/blob/dev/zhaquirks/inovelli/__init__.py#L199
# Z-Wave Config DB: https://devices.zwave-js.io/?jumpTo=0x031e:0x0001:0x0001:0.0
# Inovelli Toolbox: https://inovelliusa.github.io/inovelli-switch-toolbox/
############

mode: parallel
max: 100 # Default max is 10, which might be an issue if you have a lot of switches and you're calling the script per entity for some goofy reason.


blueprint:
  name: Inovelli LED Settings and Effects Blueprint
  domain: script
  source_url: https://github.com/kschlichter/Home-Assistant-Inovelli-Effects-and-Colors/blob/Blueprint/blueprints/script/kschlichter/inovelli_led_blueprint.yaml
  description: >-
    Sets LED colors and effects on Inovelli "Black", "Red 500", "Red 800", and "Blue" Series switches, dimmers, and fan controllers
    through the Zwave JS, ZHA, and Zigbee2MQTT integrations.  Devices from all series can be used together,
    and can be called by floor, area, group, device, and entity.
  homeassistant:
    min_version: 2023.04.0
  input:

#alias: Inovelli LED Settings and Effects
#description: >-
#    Sets LED colors and effects on Inovelli "Black", "Red 500", "Red 800", and "Blue" Series switches, dimmers, and fan controllers
#    through the Zwave JS, ZHA, and Zigbee2MQTT integrations.  Devices from all series can be used together,
#    and can be called by floor, area, group, device, and entity.
#fields:


    floor:
      name: Floor
      description: Floor IDs containing areas with Inovelli devices.  
      #required: false
      example: 'downstairs,upstairs, outside'
      default: 'invalid'
      selector:
        floor:
          multiple: true
          device:
            - integration: zwave_js
              manufacturer: Inovelli
              model: LZW30
            - integration: zwave_js
              manufacturer: Inovelli
              model: LZW31
            - integration: zwave_js
              manufacturer: Inovelli
              model: LZW30-SN
            - integration: zwave_js
              manufacturer: Inovelli
              model: LZW31-SN
            - integration: zwave_js
              manufacturer: Inovelli
              model: LZW36
            - integration: zwave_js
              manufacturer: Inovelli
              model: VZW31-SN
            - integration: zha
              manufacturer: Inovelli
              model: VZM31-SN
            - integration: zha
              manufacturer: Inovelli
              model: VZM35-SN
            - integration: mqtt
              manufacturer: Inovelli
              model: 2-in-1 switch + dimmer ### Inovelli's model, starting with Zigbee2mqtt 2.0.0
            - integration: mqtt
              manufacturer: Inovelli
              model: Fan controller ### Inovelli's model, starting with Zigbee2mqtt 2.0.0
            - integration: mqtt
              manufacturer: Inovelli
              model: Inovelli 2-in-1 switch + dimmer (VZM31-SN) ### Inovelli's model, before Zigbee2mqtt 2.0.0
            - integration: mqtt
              manufacturer: Inovelli
              model: Inovelli Fan Controller (VZM35-SN) ### Inovelli's model, before Zigbee2mqtt 2.0.0
            - integration: mqtt
              manufacturer: Inovelli
              model: 2-in-1 switch + dimmer (VZM31-SN) ### Inovelli's model, before Zigbee2mqtt 1.36
            - integration: mqtt
              manufacturer: Inovelli
              model: Fan Controller (VZM35-SN) ### Inovelli's model, before Zigbee2mqtt 1.36
  
    area:
      name: Area
      description: Area names or IDs containing Inovelli devices.
      #required: false
      example: 'Family Room, 7d7a44fe4d0f4bee947c430d2714e45c'
      default: 'invalid'
      selector:
        area:
          multiple: true
          device:
            - integration: zwave_js
              manufacturer: Inovelli
              model: LZW30
            - integration: zwave_js
              manufacturer: Inovelli
              model: LZW31
            - integration: zwave_js
              manufacturer: Inovelli
              model: LZW30-SN
            - integration: zwave_js
              manufacturer: Inovelli
              model: LZW31-SN
            - integration: zwave_js
              manufacturer: Inovelli
              model: LZW36
            - integration: zwave_js
              manufacturer: Inovelli
              model: VZW31-SN
            - integration: zha
              manufacturer: Inovelli
              model: VZM31-SN
            - integration: zha
              manufacturer: Inovelli
              model: VZM35-SN
            - integration: mqtt
              manufacturer: Inovelli
              model: 2-in-1 switch + dimmer ### Inovelli's model, starting with Zigbee2mqtt 2.0.0
            - integration: mqtt
              manufacturer: Inovelli
              model: Fan controller ### Inovelli's model, starting with Zigbee2mqtt 2.0.0
            - integration: mqtt
              manufacturer: Inovelli
              model: Inovelli 2-in-1 switch + dimmer (VZM31-SN) ### Inovelli's model, before Zigbee2mqtt 2.0.0
            - integration: mqtt
              manufacturer: Inovelli
              model: Inovelli Fan Controller (VZM35-SN) ### Inovelli's model, before Zigbee2mqtt 2.0.0
            - integration: mqtt
              manufacturer: Inovelli
              model: 2-in-1 switch + dimmer (VZM31-SN) ### Inovelli's model, before Zigbee2mqtt 1.36
            - integration: mqtt
              manufacturer: Inovelli
              model: Fan Controller (VZM35-SN) ### Inovelli's model, before Zigbee2mqtt 1.36
  
    group:
      name: Group
      description: Group names or IDs for groups containing Inovelli devices.  Mix and match types as you like.
      #required: false
      example: 'group.lights_and_switches, 0249abdc634c12cbf6cdc06d7a507495'
      default: 'invalid'
      selector:
        entity:
          multiple: true
          filter:
            - domain:
                - group
                - fan
                - light
                - switch
  
    device:
      name: Device
      description: Device IDs of Inovelli devices.  Mix and match types as you like.
      #required: false
      example: '0249abdc634c12cbf6cdc06d7a507495'
      default: 'invalid'
      selector:
        device:
          multiple: true
          filter:
            - integration: zwave_js
              manufacturer: Inovelli
              model: LZW30
            - integration: zwave_js
              manufacturer: Inovelli
              model: LZW31
            - integration: zwave_js
              manufacturer: Inovelli
              model: LZW30-SN
            - integration: zwave_js
              manufacturer: Inovelli
              model: LZW31-SN
            - integration: zwave_js
              manufacturer: Inovelli
              model: LZW36
            - integration: zwave_js
              manufacturer: Inovelli
              model: VZW31-SN
            - integration: zha
              manufacturer: Inovelli
              model: VZM31-SN
            - integration: zha
              manufacturer: Inovelli
              model: VZM35-SN
            - integration: mqtt
              manufacturer: Inovelli
              model: 2-in-1 switch + dimmer ### Inovelli's model, starting with Zigbee2mqtt 2.0.0
            - integration: mqtt
              manufacturer: Inovelli
              model: Fan controller ### Inovelli's model, starting with Zigbee2mqtt 2.0.0
            - integration: mqtt
              manufacturer: Inovelli
              model: Inovelli 2-in-1 switch + dimmer (VZM31-SN) ### Inovelli's model, before Zigbee2mqtt 2.0.0
            - integration: mqtt
              manufacturer: Inovelli
              model: Inovelli Fan Controller (VZM35-SN) ### Inovelli's model, before Zigbee2mqtt 2.0.0
            - integration: mqtt
              manufacturer: Inovelli
              model: 2-in-1 switch + dimmer (VZM31-SN) ### Inovelli's model, before Zigbee2mqtt 1.36
            - integration: mqtt
              manufacturer: Inovelli
              model: Fan Controller (VZM35-SN) ### Inovelli's model, before Zigbee2mqtt 1.36
  
  
    entity:
      name: Entity
      description: >-
        The light.*, switch.*, or fan.* entity for the LED we're setting.  Can be
        a comma separated list of Inovelli devices.  Mix and match types as you like.
      #required: false
      example: light.office, fan.guest_room
      default: 'invalid'
      selector:
        entity:
          multiple: true
          filter:
            - domain:
                - fan
                - light
                - switch
              #model: LZW36 # Device model should really be an option for entities.
  
    LEDnumber:
      name: LED Number
      description: >-
        Sets the full LED bar by default, or specific LEDs (1 – 7) starting at the bottom.
      #required: false
      example: All
      default: 'all'
      selector:
        select:
          options:
            - All
            - LED 1
            - LED 2
            - LED 3
            - LED 4
            - LED 5
            - LED 6
            - LED 7
  
    LEDcolor:
      name: LED Color When On (non-effect)
      description: Sets the color of the LED status, which indicates brightness levels.
      #required: false
      example: Blue
      default: 'no change'
      selector:
        select:
          options:
            - "Off"
            - Red
            - Orange
            - Lemon
            - Yellow
            - Lime
            - Green
            - Cyan
            - Teal
            - Blue
            - Purple
            - Magenta
            - Light Pink
            - Pink
            - Hot Pink
            - White
            - All Clear
            - All Unicorn
            - All USA
  
    LEDcolor_off:
      name: LED Color When Off (non-effect). Red 800 and Blue Series only.
      description: Sets the color of the LED status, which indicates brightness levels.
      #required: false
      example: Blue
      default: 'no change'
      selector:
        select:
          options:
            - "Off"
            - Red
            - Orange
            - Lemon
            - Yellow
            - Lime
            - Green
            - Cyan
            - Teal
            - Blue
            - Purple
            - Magenta
            - Light Pink
            - Pink
            - Hot Pink
            - White
            - All Clear
            - All Unicorn
            - All USA
  
    LEDbrightness:
      name: LED Brightness When On (non-effect)
      description: Sets the brightness of the LED status when on. 0 means off.
      #required: false
      example: "6"
      default: '11'
      selector:
        number:
          min: 0
          max: 10
          step: 0.1
          mode: slider
  
    LEDbrightness_off:
      name: LED Brightness When Off (non-effect).
      description: Sets the brightness of the LED status when off. 0 means off.
      #required: false
      example: "2"
      default: '11'
      selector:
        number:
          min: 0
          max: 10
          step: 0.1
          mode: slider
  
    duration:
      name: Duration of Effect
      description: How long the effect will last.
      #required: false
      example: "Off"
      default: 'invalid'
      selector:
        select:
          options:
            - "Off"
            - Forever
            - 1 Second
            - 2 Seconds
            - 3 Seconds
            - 4 Seconds
            - 5 Seconds
            - 6 Seconds
            - 7 Seconds
            - 8 Seconds
            - 9 Seconds
            - 10 Seconds
            - 15 Seconds
            - 20 Seconds
            - 25 Seconds
            - 30 Seconds
            - 35 Seconds
            - 40 Seconds
            - 45 Seconds
            - 50 Seconds
            - 55 Seconds
            - 60 Seconds
            - 2 Minutes
            - 3 Minutes
            - 4 Minutes
            - 5 Minutes
            - 6 Minutes
            - 7 Minutes
            - 8 Minutes
            - 9 Minutes
            - 10 Minutes
            - 15 Minutes
            - 30 Minutes
            - 45 Minutes
            - 1 Hour
            - 2 Hours
            - Indefinitely
  
    effect:
      name: Effect
      description: Type of effect
      #required: false
      example: Pulse
      default: 'Clear Effect'
      selector:
        select:
          options:
            - "Off"
            - Clear Effect
            - Aurora
            - Blink Fast
            - Blink Medium
            - Blink Slow
            - Chase Fast
            - Chase Medium
            - Chase Slow
            - Fall Fast
            - Fall Medium
            - Fall Slow
            - Open Close
            - Pulse
            - Rise Fast
            - Rise Medium
            - Rise Slow
            - Siren Fast
            - Siren Slow
            - Small to Big
            - Solid
  
    brightness:
      name: Effect Brightness
      description: Sets the brightness of the LED's effect.  0 means off.
      #required: false
      example: "8"
      default: '11'
      selector:
        number:
          min: 0
          max: 10
          step: 0.1
          mode: slider
  
    color:
      name: Effect Color
      description: Color of LED effect
      #required: false
      example: Red
      default: 'no change'
      selector:
        select:
          options:
            - "Off"
            - Red
            - Orange
            - Lemon
            - Yellow
            - Lime
            - Green
            - Cyan
            - Teal
            - Blue
            - Purple
            - Magenta
            - Light Pink
            - Pink
            - Hot Pink
            - White
            - All Clear
            - All Unicorn
            - All USA


variables:
  input_floor: !input floor
  input_area: !input area
  input_group: !input group
  input_device: !input device
  input_entity: !input entity

  input_color: !input color
  input_duration: !input duration
  input_brightness: !input brightness
  input_effect: !input effect
  input_LEDcolor: !input LEDcolor
  input_LEDcolor_off: !input LEDcolor_off
  input_LEDbrightness: !input LEDbrightness
  input_LEDbrightness_off: !input LEDbrightness_off


  ##################
  # Look-up tables for easy reference and future maintenance.
  ##################
  color_set:
    "off": 0
    red: 0
    orange: 8
    lemon: 28
    yellow: 42
    lime: 64
    green: 85
    cyan: 127
    teal: 145
    blue: 170
    purple: 190
    magenta: 212
    light pink: 220
    pink: 234
    hot pink: 234
    white: 255
    "all clear": {'led 1':255,'led 2':255,'led 3':255,'led 4':255,'led 5':255,'led 6':255,'led 7':255,'all':0}
    "all unicorn": {'led 1':234,'led 2':234,'led 3':170,'led 4':170,'led 5':170,'led 6':85,'led 7':85,'all':0}
    "all usa": {'led 1':170,'led 2':170,'led 3':255,'led 4':255,'led 5':0,'led 6':0,'led 7':0,'all':255}

  ### Blue Series ZHA Quirks says 1 – 7 but it seems to be 0 – 6 ###
  led_map:
    all: -1
    led 1: 0
    led 2: 1
    led 3: 2
    led 4: 3
    led 5: 4
    led 6: 5
    led 7: 6

  duration_values:
    "off": 0
    0 : 0
    1 second: 1
    1 seconds: 1
    2 seconds: 2
    3 seconds: 3
    4 seconds: 4
    5 seconds: 5
    6 seconds: 6
    7 seconds: 7
    8 seconds: 8
    9 seconds: 9
    10 seconds: 10
    15 seconds: 15
    20 seconds: 20
    25 seconds: 25
    30 seconds: 30
    35 seconds: 35
    40 seconds: 40
    45 seconds: 45
    50 seconds: 50
    55 seconds: 55
    60 seconds: 60
    1 minute: 60
    1 minutes: 60
    2 minutes: 62
    3 minutes: 63
    4 minutes: 64
    5 minutes: 65
    6 minutes: 66
    7 minutes: 67
    8 minutes: 68
    9 minutes: 69
    10 minutes: 70
    15 minutes: 75
    30 minutes: 90
    45 minutes: 105
    60 minutes: 120
    1 hour: 120
    2 hours: 122
    forever: 255
    indefinitely: 255

  ### Black 500 Series Dimmer ###
  LZW30_effects:
    "off": 0
    clear effect: 0
    aurora: 0
    blink: 0
    blink fast: 0
    blink medium: 0
    blink slow: 0
    chase: 0
    chase fast: 0
    chase medium: 0
    chase slow: 0
    fall fast: 0
    fall medium: 0
    fall slow: 0
    open close: 0
    pulse: 0
    rise fast: 0
    rise medium: 0
    rise slow: 0
    siren fast: 0
    siren slow: 0
    small to big: 0
    solid: 0
    fast blink: 0
    slow blink: 0

  ### Black 500 Series Dimmer ###
  LZW31_effects:
    "off": 0
    clear effect: 0
    aurora: 0
    blink: 0
    blink fast: 0
    blink medium: 0
    blink slow: 0
    chase: 0
    chase fast: 0
    chase medium: 0
    chase slow: 0
    fall fast: 0
    fall medium: 0
    fall slow: 0
    open close: 0
    pulse: 0
    rise fast: 0
    rise medium: 0
    rise slow: 0
    siren fast: 0
    siren slow: 0
    small to big: 0
    solid: 0
    fast blink: 0
    slow blink: 0

  ### Red 500 Series Switch ###
  LZW30SN_effects:
    "off": 0
    clear effect: 0
    aurora: 4
    blink: 3
    blink fast: 2
    blink medium: 3
    blink slow: 3
    chase: 2
    chase fast: 2
    chase medium: 2
    chase slow: 3
    fall fast: 2
    fall medium: 3
    fall slow: 3
    open close: 4
    pulse: 4
    rise fast: 2
    rise medium: 3
    rise slow: 3
    siren fast: 4
    siren slow: 4
    small to big: 4
    solid: 1
    fast blink: 2
    slow blink: 3

  ### Red 500 Series Dimmer ###
  LZW31SN_effects:
    "off": 0
    clear effect: 255
    aurora: 4
    blink: 4
    blink fast: 3
    blink medium: 4
    blink slow: 4
    chase: 2
    chase fast: 2
    chase medium: 2
    chase slow: 2
    fall fast: 2
    fall medium: 2
    fall slow: 2
    open close: 2
    pulse: 5
    rise fast: 2
    rise medium: 2
    rise slow: 2
    siren slow: 2
    siren fast: 2
    small to big: 2
    solid: 1
    fast blink: 3
    slow blink: 4

  ### Red 500 Series Fan Light Combo ###
  LZW36_light_effects:
    "off": 0
    clear effect: 255
    aurora: 4
    blink: 4
    blink fast: 3
    blink medium: 4
    blink slow: 4
    chase: 2
    chase fast: 2
    chase medium: 2
    chase slow: 2
    fall fast: 2
    fall medium: 2
    fall slow: 2
    open close: 2
    pulse: 5
    rise fast: 2
    rise medium: 2
    rise slow: 2
    siren slow: 2
    siren fast: 2
    small to big: 2
    solid: 1
    fast blink: 3
    slow blink: 4

  LZW36_fan_effects:
    "off": 0
    clear effect: 255
    aurora: 4
    blink: 4
    blink fast: 3
    blink medium: 4
    blink slow: 4
    chase: 2
    chase fast: 2
    chase medium: 2
    chase slow: 2
    fall fast: 2
    fall medium: 2
    fall slow: 2
    open close: 2
    pulse: 5
    rise fast: 2
    rise medium: 2
    rise slow: 2
    siren slow: 2
    siren fast: 2
    small to big: 2
    solid: 1
    fast blink: 3
    slow blink: 4

  ### Red 800 Series Dimmer ###
  VZW31SN_effects:
    "off": 0
    clear effect: 255
    aurora: 8
    blink: 15
    blink fast: 2
    blink medium: 15
    blink slow: 3
    chase: 5
    chase fast: 17
    chase medium: 5
    chase slow: 16
    fall fast: 11
    fall medium: 10
    fall slow: 9
    open close: 6
    pulse: 4
    rise fast: 14
    rise medium: 13
    rise slow: 12
    siren fast: 18
    siren slow: 19
    small to big: 7
    solid: 1
    fast blink: 2
    slow blink: 3

  ### Blue Series Dimmer ###
  VZM31SN_ZHA_effects:
    "off": 0
    "clear effect": 255
    aurora: 8
    blink: 15
    blink fast: 2
    blink medium: 15
    blink slow: 3
    chase: 5
    chase fast: 17
    chase medium: 5
    chase slow: 16
    fall fast: 11
    fall medium: 10
    fall slow: 9
    open close: 6
    pulse: 4
    rise fast: 14
    rise medium: 13
    rise slow: 12
    siren fast: 18
    siren slow: 19
    small to big: 7
    solid: 1
    fast blink: 2
    slow blink: 3

  VZM31SN_Z2M_effects:
    "off": "off"
    clear effect: clear_effect
    aurora: aurora
    blink: blink
    blink fast: fast_blink
    blink medium: medium_blink
    blink slow: slow_blink
    chase: chase
    chase fast: fast_chase
    chase medium: chase
    chase slow: slow_chase
    fall fast: fast_falling
    fall medium: medium_falling
    fall slow: slow_falling
    open close: open_close
    pulse: pulse
    rise fast: fast_rising
    rise medium: medium_rising
    rise slow: slow_rising
    siren fast: fast_siren
    siren slow: slow_siren
    small to big: small_to_big
    solid: solid
    fast blink: fast_blink
    slow blink: slow_blink

  ### Blue Series Fan ###
  VZM35SN_ZHA_effects:
    "off": 0
    "clear effect": 255
    aurora: 8
    blink: 15
    blink fast: 2
    blink medium: 15
    blink slow: 3
    chase: 5
    chase fast: 17
    chase medium: 5
    chase slow: 16
    fall fast: 11
    fall medium: 10
    fall slow: 9
    open close: 6
    pulse: 4
    rise fast: 14
    rise medium: 13
    rise slow: 12
    siren fast: 18
    siren slow: 19
    small to big: 7
    solid: 1
    fast blink: 2
    slow blink: 3

  VZM35SN_Z2M_effects:
    "off": "off"
    clear effect: clear_effect
    aurora: aurora
    blink: blink
    blink fast: fast_blink
    blink medium: medium_blink
    blink slow: slow_blink
    chase: chase
    chase fast: fast_chase
    chase medium: chase
    chase slow: slow_chase
    fall fast: fast_falling
    fall medium: medium_falling
    fall slow: slow_falling
    open close: open_close
    pulse: pulse
    rise fast: fast_rising
    rise medium: medium_rising
    rise slow: slow_rising
    siren fast: fast_siren
    siren slow: slow_siren
    small to big: small_to_big
    solid: solid
    fast blink: fast_blink
    slow blink: slow_blink



  ##################
  # Store model names for reference and validation checks if necessary
  ##################
  zwave_models:
    - LZW30    # Black 500 Series switch
    - LZW31    # Black 500 Series dimmer
    - LZW31-SN # Red 500 Series dimmer
    - LZW30-SN # Red 500 Series switch
    - LZW36    # Red 500 Series combo_light, combo_fan
    - VZW31-SN # Red 800 series dimmer

  zigbee2mqtt_models: # BLUE
    - Inovelli 2-in-1 switch + dimmer (VZM31-SN) # Blue Series dimmer Zigbee2MQTT 1.35 and below
    - 2-in-1 switch + dimmer (VZM31-SN) # Blue Series dimmer Zigbee2MQTT 1.36 and above
    - Inovelli Fan Controller (VZM35-SN)         # Blue Series fan Zigbee2MQTT 1.35 and below
    - Fan Controller (VZM35-SN)         # Blue Series fan Zigbee2MQTT 1.36 and above

  zha_models: # BLUE
    - VZM31-SN # Blue Series dimmer
    - VZM35-SN # Blue Series fan

  ##################
  # Allowed domains to limit which types of entities are processed
  ##################
  allowed_domains:
    - fan
    - light
    - switch

  ##################
  # There's a lot of redundancy here, but it should be easy to update if parameter names change for one model and not another
  ##################
  parameters:
    LZW30_all_effect_bulk: "null"
    LZW30_all_effect_color: "null"
    LZW30_all_effect_brightness: "null"
    LZW30_all_effect_duration: "null"
    LZW30_all_effect_effect: "null"
    LZW30_all_ledcolor: "LED Indicator Color"
    LZW30_all_ledbrightness: "LED Indicator Intensity (When on)"
    LZW30_all_ledbrightness_off: "LED Indicator Intensity (When Off)"

    LZW31_all_effect_bulk: "null"
    LZW31_all_effect_color: "null"
    LZW31_all_effect_brightness: "null"
    LZW31_all_effect_duration: "null"
    LZW31_all_effect_effect: "null"
    LZW31_all_ledcolor: "LED Indicator Color"
    LZW31_all_ledbrightness: "LED Indicator Intensity"
    LZW31_all_ledbrightness_off: "LED Indicator Intensity (When Off)"

    LZW31SN_all_effect_bulk: 16
    LZW31SN_all_effect_color: "LED Indicator: Effect Color"
    LZW31SN_all_effect_brightness: "LED Indicator: Effect Brightness"
    LZW31SN_all_effect_duration: "LED Indicator: Effect Duration"
    LZW31SN_all_effect_effect: "LED Indicator: Effect Type"
    LZW31SN_all_ledcolor: "LED Indicator: Color"
    LZW31SN_all_ledbrightness: "LED Indicator: Brightness When On"
    LZW31SN_all_ledbrightness_off: "LED Indicator: Brightness When Off"

    LZW30SN_all_effect_bulk: 8
    LZW30SN_all_effect_color: LED Effect Color
    LZW30SN_all_effect_brightness: LED Effect Brightness
    LZW30SN_all_effect_duration: LED Effect Duration
    LZW30SN_all_effect_effect: LED Effect Type
    LZW30SN_all_ledcolor: LED Indicator Color
    LZW30SN_all_ledbrightness: LED Indicator Brightness
    LZW30SN_all_ledbrightness_off: LED Indicator Brightness When Off

    LZW36_light_all_effect_bulk: 24
    LZW36_light_all_effect_color: Light LED Effect Color
    LZW36_light_all_effect_brightness: Light LED Effect Brightness
    LZW36_light_all_effect_duration: Light LED Effect Duration
    LZW36_light_all_effect_effect: Light LED Effect Type
    LZW36_light_all_ledcolor: Light LED Indicator Color
    LZW36_light_all_ledbrightness: Light LED Strip Brightness
    LZW36_light_all_ledbrightness_off: Light LED Strip Brightness When Off

    LZW36_fan_all_effect_bulk: 25
    LZW36_fan_all_effect_color: Fan LED Effect Color
    LZW36_fan_all_effect_brightness: Fan LED Effect Brightness
    LZW36_fan_all_effect_duration: Fan LED Effect Duration
    LZW36_fan_all_effect_effect: Fan LED Effect Type
    LZW36_fan_all_ledcolor: Fan LED Indicator Color
    LZW36_fan_all_ledbrightness: Fan LED Strip Brightness
    LZW36_fan_all_ledbrightness_off: Fan LED Strip Brightness When Off

    VZW31SN_all_effect_bulk: 99
    VZW31SN_all_effect_color: All LED Strip Effect - Color
    VZW31SN_all_effect_brightness: All LED Strip Effect - Level
    VZW31SN_all_effect_duration: All LED Strip Effect - Duration
    VZW31SN_all_effect_effect: All LED Strip Effect - Effect
    VZW31SN_all_ledcolor: Default All LED Strip Color When On
    VZW31SN_all_ledcolor_off: Default All LED Strip Color When Off
    VZW31SN_all_ledbrightness: Default All LED Strip Brightness When On
    VZW31SN_all_ledbrightness_off: Default All LED Strip Brightness When Off

    VZW31SN_1_effect_bulk: 64
    VZW31SN_1_effect_color: LED1 Strip Effect - Color
    VZW31SN_1_effect_brightness: LED1 Strip Effect - Level
    VZW31SN_1_effect_duration: LED1 Strip Effect - Duration
    VZW31SN_1_effect_effect: LED1 Strip Effect - Effect
    VZW31SN_2_effect_bulk: 69
    VZW31SN_2_effect_color: LED2 Strip Effect - Color
    VZW31SN_2_effect_brightness: LED2 Strip Effect - Level
    VZW31SN_2_effect_duration: LED2 Strip Effect - Duration
    VZW31SN_2_effect_effect: LED2 Strip Effect - Effect
    VZW31SN_3_effect_bulk: 74
    VZW31SN_3_effect_color: LED3 Strip Effect - Color
    VZW31SN_3_effect_brightness: LED3 Strip Effect - Level
    VZW31SN_3_effect_duration: LED3 Strip Effect - Duration
    VZW31SN_3_effect_effect: LED3 Strip Effect - Effect
    VZW31SN_4_effect_bulk: 79
    VZW31SN_4_effect_color: LED4 Strip Effect - Color
    VZW31SN_4_effect_brightness: LED4 Strip Effect - Level
    VZW31SN_4_effect_duration: LED4 Strip Effect - Duration
    VZW31SN_4_effect_effect: LED4 Strip Effect - Effect
    VZW31SN_5_effect_bulk: 84
    VZW31SN_5_effect_color: LED5 Strip Effect - Color
    VZW31SN_5_effect_brightness: LED5 Strip Effect - Level
    VZW31SN_5_effect_duration: LED5 Strip Effect - Duration
    VZW31SN_5_effect_effect: LED5 Strip Effect - Effect
    VZW31SN_6_effect_bulk: 89
    VZW31SN_6_effect_color: LED6 Strip Effect - Color
    VZW31SN_6_effect_brightness: LED6 Strip Effect - Level
    VZW31SN_6_effect_duration: LED6 Strip Effect - Duration
    VZW31SN_6_effect_effect: LED6 Strip Effect - Effect
    VZW31SN_7_effect_bulk: 94
    VZW31SN_7_effect_color: LED7 Strip Effect - Color
    VZW31SN_7_effect_brightness: LED7 Strip Effect - Level
    VZW31SN_7_effect_duration: LED7 Strip Effect - Duration
    VZW31SN_7_effect_effect: LED7 Strip Effect - Effect


  ##################
  # Clean up inputs; filter for supported entities from provided floor, areas, groups, devices, and entities.
  ##################
  #floor: "{{ floor|default(\"invalid\")|lower }}"
  #area: "{{ area|default(\"invalid\")|lower }}"
  #group: "{{ group|default(\"invalid\")|lower }}"
  #device: "{{ device|default(\"invalid\")|lower }}"
  #entity: "{{ entity|default(\"invalid\")|lower }}"

  floor: "{{ input_floor|default(\"invalid\")|lower }}"
  area: "{{ input_area|default(\"invalid\")|lower }}"
  group: "{{ input_group|default(\"invalid\")|lower }}"
  device: "{{ input_device|default(\"invalid\")|lower }}"
  entity: "{{ input_entity|default(\"invalid\")|lower }}"

  entities_from_floor: >-
    {% set floor_array = namespace(floor_list=[]) %}
    {% set entities = namespace(entities=[]) %}
    {% if floor != 'invalid' %}
      {% if floor == 'all' %}
        {% set floor_array.floor_list = floors() %}

      {# Converting to a list #}
      {% elif ',' in floor %}
        {% set floornum = floor.split( ',' ) | count %}
        {% for i in range(0,floornum) %}
          {% set floor_array.floor_list = floor_array.floor_list + [floor.split( ',' )[i]|string|trim ] %}
        {% endfor %}
      {% elif floor[0]|count == 1 %}
        {# if the first item in the list has only a single character, it isn't a valid list #}
        {% set floor_array.floor_list = floor_array.floor_list + [floor|string|trim] %}
      {% else %}
        {% set floor_array.floor_list = floor %}
      {% endif %}

      {# Detecting entities #}
      {% for floor in floor_array.floor_list %}
        {% for area in floor_areas(floor) %}
          {% for ent in area_entities(area) %}
            {% if ent.split('.')[0] in allowed_domains %}
              {% set entities.entities = entities.entities + [ent|string|trim] %}
            {% endif %}
          {% endfor %}
        {% endfor %}
      {% endfor %}
    {% endif %}
    {{ entities.entities|lower }}

  entities_from_area: >-
    {% set area_array = namespace(area_list=[]) %}
    {% set entities = namespace(entities=[]) %}
    {% if area != 'invalid' %}
      {# I'd like to handle 'all' as a list for templating simplicity #}
      {# changing this to 'all' in area would trigger an area named 'all upstairs' #}
      {% if area == 'all' %}
        {% set area_array.area_list = areas() %}

      {# Converting to a list #}
      {% elif ',' in area %}
        {% set areanum = area.split( ',' ) | count %}
        {% for i in range(0,areanum) %}
          {% set area_array.area_list = area_array.area_list + [area.split( ',' )[i]|string|trim ] %}
        {% endfor %}
      {% elif area[0]|count == 1 %}
        {# if the first item in the list has only a single character, it isn't a valid list #}
        {% set area_array.area_list = area_array.area_list + [area|string|trim] %}
      {% else %}
        {% set area_array.area_list = area %}
      {% endif %}

      {# Detecting entities #}
      {% for area in area_array.area_list %}
        {% for ent in area_entities(area) %}
          {% if ent.split('.')[0] in allowed_domains %}
            {% set entities.entities = entities.entities + [ent|string|trim] %}
          {% endif %}
        {% endfor %}
      {% endfor %}
    {% endif %}
    {{ entities.entities|lower }}

  entities_from_group: >-
    {% set group_array = namespace(group_list=[]) %}
    {% set entities = namespace(entities=[]) %}
    {% if group != 'invalid' %}
      {# Converting to a list #}
      {% if ',' in group %}
        {% set groupnum = group.split( ',' ) | count %}
        {% for i in range(0,groupnum) %}
          {% set group_array.group_list = group_array.group_list + [group.split( ',' )[i]|string|trim ] %}
        {% endfor %}
      {% elif group[0]|count == 1 %}
        {# if the first item in the list has only a single character, it isn't a valid list #}
        {% set group_array.group_list = group_array.group_list + [group|string|trim] %}
      {% else %}
        {% set group_array.group_list = group %}
      {% endif %}

      {# Detecting entities #}
      {% for group in group_array.group_list %}
        {% for entity in expand(group) %}
          {% set ent = entity.entity_id %}
          {% if ent.split('.')[0] in allowed_domains %}
            {% set entities.entities = entities.entities + [ent|string|trim] %}
          {% endif %}
        {% endfor %}
      {% endfor %}
    {% endif %}
    {{ entities.entities|lower }}

  entities_from_device: >-
    {% set devices = namespace(devices=[]) %}
    {% set entities = namespace(entities=[]) %}
    {% if device != 'invalid' %}
      {# Converting to a list #}
      {% if ',' in device %}
        {% set devicenum = device.split( ',' ) | count %}
        {% for i in range(0,devicenum) %}
          {% set devices.devices = devices.devices + [device.split( ',' )[i]|string|trim ] %}
        {% endfor %}
      {% elif device[0]|count == 1 %}
        {# if the first item in the list has only a single character, it isn't a valid list #}
        {% set devices.devices = devices.devices + [device|string|trim] %}
      {% else %}
        {% set devices.devices = device %}
      {% endif %}

      {# Detecting entities #}
      {% for device in devices.devices %}
        {% for ent in device_entities(device) %}
          {% if ent.split('.')[0] in allowed_domains %}
            {% set entities.entities = entities.entities + [ent|string|trim] %}
          {% endif %}
        {% endfor %}
      {% endfor %}
    {% endif %}
    {{ entities.entities|lower }}

  entities_from_entity: >-
    {% set entities_array = namespace(entities=[]) %}
    {% set entities = namespace(entities=[]) %}
    {% if entity != 'invalid' %}
      {# Converting to a list #}
      {% if ',' in entity %}
        {% set entitynum = entity.split( ',' ) | count %}
        {% for i in range(0,entitynum) %}
          {% set entities_array.entities = entities_array.entities + [entity.split( ',' )[i]|string|trim ] %}
        {% endfor %}
      {% elif entity[0]|count == 1 %}
        {# if the first item in the list has only a single character, it isn't a valid list #}
        {% set entities_array.entities = entities_array.entities + [entity|string|trim] %}
      {% else %}
        {% set entities_array.entities = entity %}
      {% endif %}

      {# Detecting entities #}
      {% for ent in entities_array.entities %}
        {% if ent.split('.')[0] in allowed_domains %}
          {% set entities.entities = entities.entities + [ent|string|trim] %}
        {% endif %}
      {% endfor %}
    {% endif %}
    {{ entities.entities|lower }}

  all_selected_entities: >-
    {{ entities_from_floor + entities_from_area + entities_from_group + entities_from_device + entities_from_entity }}

sequence:

  ##################
  # Cleaning up inputs; using lower case since it's able to handle capital letters in the middle of mistyped and camelcase words like "LightPink".
  # Brightness variables are set to 11 so they're skipped in the logic.  To turn the LED off, use "Off".
  ##################
  - variables:
      #LEDnumber: "{{ LEDnumber|default(\"all\")|lower }}"
      #color: "{{ color|default(\"no change\")|lower }}"
      #duration: "{{ duration|default(\"0\")|lower }}"
      #brightness: "{{ brightness|default(\"11\")|float }}"
      #effect: "{{ effect|default(\"clear effect\")|lower }}"
      #LEDcolor: "{{ LEDcolor|default(\"no change\")|lower }}"
      #LEDcolor_off: "{{ LEDcolor_off|default(\"no change\")|lower }}"
      #LEDbrightness: "{{ LEDbrightness|default(\"11\")|float }}"
      #LEDbrightness_off: "{{ LEDbrightness_off|default(\"11\")|float }}"

      LEDnumber: "{{ input_LEDnumber|default(\"all\")|lower }}"
      color: "{{ input_color|default(\"no change\")|lower }}"
      duration: "{{ input_duration|default(\"0\")|lower }}"
      brightness: "{{ input_brightness|default(\"11\")|float }}"
      effect: "{{ input_effect|default(\"clear effect\")|lower }}"
      LEDcolor: "{{ input_LEDcolor|default(\"no change\")|lower }}"
      LEDcolor_off: "{{ input_LEDcolor_off|default(\"no change\")|lower }}"
      LEDbrightness: "{{ input_LEDbrightness|default(\"11\")|float }}"
      LEDbrightness_off: "{{ input_LEDbrightness_off|default(\"11\")|float }}"

  ##################
  # Group entities by device type so the right integration and parameters can be used
  ##################
  - repeat:
      for_each:

        ##################
        # Z-Wave
        ##################
        - device_type: LZW30
          call_type: zwave_js
          entities: >-
            {% set entities = namespace(entities=[]) %}
            {% for ent in all_selected_entities %}
              {% if  is_device_attr(ent,'model','LZW30') and ent.split('.')[0] == 'switch' and ent in integration_entities('zwave_js') %}
                {% set entities.entities = entities.entities + [ent] %}
              {% endif %}
            {% endfor %}
            {{ entities.entities }}

        - device_type: LZW31
          call_type: zwave_js
          entities: >-
            {% set entities = namespace(entities=[]) %}
            {% for ent in all_selected_entities %}
              {% if  is_device_attr(ent,'model','LZW31') and ent.split('.')[0] == 'light' and ent in integration_entities('zwave_js') %}
                {% set entities.entities = entities.entities + [ent] %}
              {% endif %}
            {% endfor %}
            {{ entities.entities }}

        - device_type: LZW30SN
          call_type: zwave_js
          entities: >-
            {% set entities = namespace(entities=[]) %}
            {% for ent in all_selected_entities %}
              {% if 'LZW30-SN' in device_attr(ent,'model') and ent.split('.')[0] == 'switch' and ent in integration_entities('zwave_js') %}
                {% set entities.entities = entities.entities + [ent] %}
              {% endif %}
            {% endfor %}
            {{ entities.entities }}

        - device_type: LZW31SN
          call_type: zwave_js
          entities: >-
            {% set entities = namespace(entities=[]) %}
            {% for ent in all_selected_entities %}
              {% if 'LZW31-SN' in device_attr(ent,'model') and ent.split('.')[0] == 'light' and ent in integration_entities('zwave_js') %}
                {% set entities.entities = entities.entities + [ent] %}
              {% endif %}
            {% endfor %}
            {{ entities.entities }}

        - device_type: LZW36_light
          call_type: zwave_js
          entities: >-
            {% set entities = namespace(entities=[]) %}
            {% for ent in all_selected_entities %}
              {% if 'LZW36' in device_attr(ent,'model') and ent.split('.')[0] == 'light' and ent in integration_entities('zwave_js') %}
                {% set entities.entities = entities.entities + [ent] %}
              {% endif %}
            {% endfor %}
            {{ entities.entities }}

        - device_type: LZW36_fan
          call_type: zwave_js
          entities: >-
            {% set entities = namespace(entities=[]) %}
            {% for ent in all_selected_entities %}
              {% if 'LZW36' in device_attr(ent,'model') and ent.split('.')[0] == 'fan' and ent in integration_entities('zwave_js') %}
                {% set entities.entities = entities.entities + [ent] %}
              {% endif %}
            {% endfor %}
            {{ entities.entities }}

        - device_type: VZW31SN
          call_type: zwave_js
          effects: "{{ iif(duration != 0,VZW31SN_effects[effect],0) }}" ### So we can pass the device-specific effect into the repeat loop ###
          entities: >-
            {% set entities = namespace(entities=[]) %}
            {% for ent in all_selected_entities %}
              {% if 'VZW31-SN' in device_attr(ent,'model') and ent.split('.')[0] == 'light' and ent in integration_entities('zwave_js') %}
                {% set entities.entities = entities.entities + [ent] %}
              {% endif %}
            {% endfor %}
            {{ entities.entities }}

        ##################
        # Zigbee2MQTT
        ##################
        - device_type: VZM31SN
          call_type: z2m
          effects: "{{ iif(duration != 0,VZM31SN_Z2M_effects[effect],'clear_effect') }}"
          entities: >-
            {% set entities = namespace(entities=[]) %}
            {% for ent in all_selected_entities %}
              {% if '2-in-1 switch' in device_attr(ent,'model') and ent.split('.')[0] == 'light' and ent in integration_entities('mqtt') %}
                {% set entities.entities = entities.entities + [ent] %}
              {% endif %}
            {% endfor %}
            {{ entities.entities }}

        - device_type: VZM35SN
          call_type: z2m
          effects: "{{ iif(duration != 0,VZM35SN_Z2M_effects[effect],'clear_effect') }}"
          entities: >-
            {% set entities = namespace(entities=[]) %}
            {% for ent in all_selected_entities %}
              {% if 'fan controller' in (device_attr(ent,'model')|lower) and ent.split('.')[0] == 'fan' and ent in integration_entities('mqtt') %}
                {% set entities.entities = entities.entities + [ent] %}
              {% endif %}
            {% endfor %}
            {{ entities.entities }}

        ##################
        # ZHA Zigbee Home Automation
        ##################
        - device_type: VZM31SN
          call_type: zha
          effects: "{{ iif(duration != 0,VZM31SN_ZHA_effects[effect],0) }}"
          entities: >-
            {% set entities = namespace(entities=[]) %}
            {% for ent in all_selected_entities %}
              {% if 'VZM31-SN' in device_attr(ent,'model') and ent.split('.')[0] == 'light' and ent in integration_entities('zha') %}
                {% set entities.entities = entities.entities + [ent] %}
              {% endif %}
            {% endfor %}
            {{ entities.entities }}

        - device_type: VZM35SN
          call_type: zha
          effects: "{{ iif(duration != 0,VZM35SN_ZHA_effects[effect],0) }}"
          entities: >-
            {% set entities = namespace(entities=[]) %}
            {% for ent in all_selected_entities %}
              {% if 'VZM35-SN' in device_attr(ent,'model') and ent.split('.')[0] == 'fan' and ent in integration_entities('zha') %}
                {% set entities.entities = entities.entities + [ent] %}
              {% endif %}
            {% endfor %}
            {{ entities.entities }}


      sequence:
        ##################
        # Do not continue if we don't have at least one entity of this type
        ##################
        - condition: template
          value_template: "{{ repeat.item.entities |count >0 }}"

        ##################
        # LED strip color
        ##################
        - choose:
            - conditions: "{{ LEDcolor != \"no change\" }}"
              sequence:

                ### Zwave JS
                ### Red Series can't set individual LEDs so we'll filter out color sets and force 'all' ###
                - choose:
                    - conditions: "{{ repeat.item.call_type == 'zwave_js' and 'all' not in LEDcolor and LEDnumber == 'all' }}"
                      sequence:
                        - service: zwave_js.set_config_parameter
                          data:
                            entity_id: "{{ repeat.item.entities }}"
                            parameter: >
                              {% set effect_param = repeat.item.device_type + '_all' + '_ledcolor' %}
                              {{ parameters[effect_param] }}
                            value: "{{ color_set[LEDcolor] }} "

                ### Zigbee2mqtt ###
                - choose:
                    - conditions: "{{ repeat.item.call_type == 'z2m' }}"
                      sequence:
                        - repeat:
                            for_each: "{{ repeat.item.entities }} "
                            sequence:
                              - choose:
                                  ### Configuring a color set for all LEDs ###
                                  - conditions: "{{ 'all' in LEDcolor and LEDnumber == 'all' }}"
                                    sequence:
                                      - variables:
                                          entity: "{{ repeat.item }}"
                                      - repeat:
                                          for_each:
                                            - "led 1"
                                            - "led 2"
                                            - "led 3"
                                            - "led 4"
                                            - "led 5"
                                            - "led 6"
                                            - "led 7"
                                            - "all"
                                          sequence:
                                            - service: mqtt.publish
                                              data:
                                                topic: >-
                                                  zigbee2mqtt/{{ states[entity].attributes.friendly_name }}/set
                                                payload: >-
                                                  {% if repeat.item == 'all' %}
                                                    { "ledColorWhenOn": {{ color_set[LEDcolor][repeat.item] }} }
                                                  {% elif repeat.item == 'led 1' %}
                                                    { "defaultLed1ColorWhenOn": {{ color_set[LEDcolor][repeat.item] }} }
                                                  {% elif repeat.item == 'led 2' %}
                                                    { "defaultLed2ColorWhenOn": {{ color_set[LEDcolor][repeat.item] }} }
                                                  {% elif repeat.item == 'led 3' %}
                                                    { "defaultLed3ColorWhenOn": {{ color_set[LEDcolor][repeat.item] }} }
                                                  {% elif repeat.item == 'led 4' %}
                                                    { "defaultLed4ColorWhenOn": {{ color_set[LEDcolor][repeat.item] }} }
                                                  {% elif repeat.item == 'led 5' %}
                                                    { "defaultLed5ColorWhenOn": {{ color_set[LEDcolor][repeat.item] }} }
                                                  {% elif repeat.item == 'led 6' %}
                                                    { "defaultLed6ColorWhenOn": {{ color_set[LEDcolor][repeat.item] }} }
                                                  {% elif repeat.item == 'led 7' %}
                                                    { "defaultLed7ColorWhenOn": {{ color_set[LEDcolor][repeat.item] }} }
                                                  {% endif %}
                                  ### Configuring just one LED or the full bar ###
                                  - conditions: "{{ 'all' not in LEDcolor and LEDcolor != 'no change' }}"
                                    sequence:
                                      - service: mqtt.publish
                                        data:
                                          topic: >-
                                            zigbee2mqtt/{{ states[repeat.item].attributes.friendly_name }}/set
                                          payload: >-
                                            {% if LEDnumber == 'all' %}
                                              { "ledColorWhenOn": {{ color_set[LEDcolor] if 'led' not in LEDnumber and LEDcolor != 'off' else 255 }} }
                                            {% elif LEDnumber == 'led 1' %}
                                              { "defaultLed1ColorWhenOn": {{ color_set[LEDcolor] if 'led' not in LEDnumber and LEDcolor != 'off' else 255 }} }
                                            {% elif LEDnumber == 'led 2' %}
                                              { "defaultLed2ColorWhenOn": {{ color_set[LEDcolor] if 'led' not in LEDnumber and LEDcolor != 'off' else 255 }} }
                                            {% elif LEDnumber == 'led 3' %}
                                              { "defaultLed3ColorWhenOn": {{ color_set[LEDcolor] if 'led' not in LEDnumber and LEDcolor != 'off' else 255 }} }
                                            {% elif LEDnumber == 'led 4' %}
                                              { "defaultLed4ColorWhenOn": {{ color_set[LEDcolor] if 'led' not in LEDnumber and LEDcolor != 'off' else 255 }} }
                                            {% elif LEDnumber == 'led 5' %}
                                              { "defaultLed5ColorWhenOn": {{ color_set[LEDcolor] if 'led' not in LEDnumber and LEDcolor != 'off' else 255 }} }
                                            {% elif LEDnumber == 'led 6' %}
                                              { "defaultLed6ColorWhenOn": {{ color_set[LEDcolor] if 'led' not in LEDnumber and LEDcolor != 'off' else 255 }} }
                                            {% elif LEDnumber == 'led 7' %}
                                              { "defaultLed7ColorWhenOn": {{ color_set[LEDcolor] if 'led' not in LEDnumber and LEDcolor != 'off' else 255 }} }
                                            {% endif %}

                ### ZHA ###
                - choose:
                    - conditions: "{{ repeat.item.call_type == 'zha' }}"
                      sequence:
                        - repeat:
                            for_each: "{{ repeat.item.entities }}"
                            sequence:
                              - choose:
                                  ### Configuring a color set for all LEDs ###
                                  - conditions: "{{ 'all' in LEDcolor and LEDnumber == 'all' }}"
                                    sequence:
                                      - variables:
                                          entity: "{{ repeat.item }}"
                                      - repeat:
                                          for_each:
                                            - "led 1"
                                            - "led 2"
                                            - "led 3"
                                            - "led 4"
                                            - "led 5"
                                            - "led 6"
                                            - "led 7"
                                            - "all"
                                          sequence:
                                            - service: zha.set_zigbee_cluster_attribute
                                              data:
                                                ieee: "{{ (device_attr( entity, 'identifiers') | list).0.1 }}"
                                                endpoint_id: 1
                                                cluster_id: 64561
                                                cluster_type: in
                                                attribute: >-
                                                  {% if repeat.item == 'all' %}
                                                    {{ 0x005f |int }}
                                                  {% elif repeat.item == 'led 1' %}
                                                    {{ 0x003c |int }}
                                                  {% elif repeat.item == 'led 2' %}
                                                    {{ 0x0041 |int }}
                                                  {% elif repeat.item == 'led 3' %}
                                                    {{ 0x0046 |int }}
                                                  {% elif repeat.item == 'led 4' %}
                                                    {{ 0x004b |int }}
                                                  {% elif repeat.item == 'led 5' %}
                                                    {{ 0x0050 |int }}
                                                  {% elif repeat.item == 'led 6' %}
                                                    {{ 0x0055 |int }}
                                                  {% elif repeat.item == 'led 7' %}
                                                    {{ 0x005a |int }}
                                                  {% endif %}
                                                value: "{{ color_set[LEDcolor][repeat.item] }}"
                                                manufacturer: 4655
                                  ### Configuring just one LED or the full bar ###
                                  - conditions: "{{ 'all' not in LEDcolor and LEDcolor != 'no change' }}"
                                    sequence:
                                      - service: zha.set_zigbee_cluster_attribute
                                        data:
                                          ieee: "{{ (device_attr( repeat.item, 'identifiers') | list).0.1 }}"
                                          endpoint_id: 1
                                          cluster_id: 64561
                                          cluster_type: in
                                          attribute: >-
                                            {% if LEDnumber == 'all' %}
                                              {{ 0x005f |int }}
                                            {% elif LEDnumber == 'led 1' %}
                                              {{ 0x003c |int }}
                                            {% elif LEDnumber == 'led 2' %}
                                              {{ 0x0041 |int }}
                                            {% elif LEDnumber == 'led 3' %}
                                              {{ 0x0046 |int }}
                                            {% elif LEDnumber == 'led 4' %}
                                              {{ 0x004b |int }}
                                            {% elif LEDnumber == 'led 5' %}
                                              {{ 0x0050 |int }}
                                            {% elif LEDnumber == 'led 6' %}
                                              {{ 0x0055 |int }}
                                            {% elif LEDnumber == 'led 7' %}
                                              {{ 0x005a |int }}
                                            {% endif %}
                                          ### Individual LEDs use 255 for 'off' while it's 'white' for the LED bar ###
                                          value: >-
                                            {% if 'led' in LEDnumber and LEDcolor == 'off' %}
                                              255
                                            {% else %}
                                              {{ color_set[LEDcolor] }}
                                            {% endif %}
                                          manufacturer: 4655


        ##################
        # LED strip color when off
        ##################
        - choose:
            - conditions: "{{ LEDcolor_off != \"no change\" }}"
              sequence:

                ### Zwave JS ###
                ### Red Series can't set individual LEDs so we'll filter out color sets and force 'all' ###
                - choose:
                    - conditions: "{{ repeat.item.call_type == 'zwave_js' and repeat.item.device_type == 'VZW31SN' and 'all' not in LEDcolor and LEDnumber == 'all' }}"
                      sequence:
                        - service: zwave_js.set_config_parameter
                          data:
                            entity_id: "{{ repeat.item.entities }}"
                            parameter: >
                              {% set effect_param = repeat.item.device_type + '_all' + '_ledcolor_off' %}
                              {{ parameters[effect_param] }}
                            value: "{{ color_set[LEDcolor_off] }} "

                ### Zigbee2mqtt ###
                - choose:
                    - conditions: "{{ repeat.item.call_type == 'z2m' }}"
                      sequence:
                        - repeat:
                            for_each: "{{ repeat.item.entities }} "
                            sequence:
                              - choose:
                                  ### Configuring a color set for all LEDs ###
                                  - conditions: "{{ 'all' in LEDcolor_off and LEDnumber == 'all' }}"
                                    sequence:
                                      - variables:
                                          entity: "{{ repeat.item }}"
                                      - repeat:
                                          for_each:
                                            - "led 1"
                                            - "led 2"
                                            - "led 3"
                                            - "led 4"
                                            - "led 5"
                                            - "led 6"
                                            - "led 7"
                                            - "all"
                                          sequence:
                                            - service: mqtt.publish
                                              data:
                                                topic: >-
                                                  zigbee2mqtt/{{ states[entity].attributes.friendly_name }}/set
                                                payload: >-
                                                  {% if repeat.item == 'all' %}
                                                    { "ledColorWhenOff": {{ color_set[LEDcolor_off][repeat.item] }} }
                                                  {% elif repeat.item == 'led 1' %}
                                                    { "defaultLed1ColorWhenOff": {{ color_set[LEDcolor_off][repeat.item] }} }
                                                  {% elif repeat.item == 'led 2' %}
                                                    { "defaultLed2ColorWhenOff": {{ color_set[LEDcolor_off][repeat.item] }} }
                                                  {% elif repeat.item == 'led 3' %}
                                                    { "defaultLed3ColorWhenOff": {{ color_set[LEDcolor_off][repeat.item] }} }
                                                  {% elif repeat.item == 'led 4' %}
                                                    { "defaultLed4ColorWhenOff": {{ color_set[LEDcolor_off][repeat.item] }} }
                                                  {% elif repeat.item == 'led 5' %}
                                                    { "defaultLed5ColorWhenOff": {{ color_set[LEDcolor_off][repeat.item] }} }
                                                  {% elif repeat.item == 'led 6' %}
                                                    { "defaultLed6ColorWhenOff": {{ color_set[LEDcolor_off][repeat.item] }} }
                                                  {% elif repeat.item == 'led 7' %}
                                                    { "defaultLed7ColorWhenOff": {{ color_set[LEDcolor_off][repeat.item] }} }
                                                  {% endif %}
                                  ### Configuring just one LED or the full bar ###
                                  - conditions: "{{ 'all' not in LEDcolor_off and LEDcolor_off != 'no change' }}"
                                    sequence:
                                      - service: mqtt.publish
                                        data:
                                          topic: >-
                                            zigbee2mqtt/{{ states[repeat.item].attributes.friendly_name }}/set
                                          payload: >-
                                            {% if LEDnumber == 'all' %}
                                              { "ledColorWhenOff": {{ color_set[LEDcolor_off] if 'led' not in LEDnumber and LEDcolor_off != 'off' else 255 }} }
                                            {% elif LEDnumber == 'led 1' %}
                                              { "defaultLed1ColorWhenOff": {{ color_set[LEDcolor_off] if 'led' not in LEDnumber and LEDcolor_off != 'off' else 255 }} }
                                            {% elif LEDnumber == 'led 2' %}
                                              { "defaultLed2ColorWhenOff": {{ color_set[LEDcolor_off] if 'led' not in LEDnumber and LEDcolor_off != 'off' else 255 }} }
                                            {% elif LEDnumber == 'led 3' %}
                                              { "defaultLed3ColorWhenOff": {{ color_set[LEDcolor_off] if 'led' not in LEDnumber and LEDcolor_off != 'off' else 255 }} }
                                            {% elif LEDnumber == 'led 4' %}
                                              { "defaultLed4ColorWhenOff": {{ color_set[LEDcolor_off] if 'led' not in LEDnumber and LEDcolor_off != 'off' else 255 }} }
                                            {% elif LEDnumber == 'led 5' %}
                                              { "defaultLed5ColorWhenOff": {{ color_set[LEDcolor_off] if 'led' not in LEDnumber and LEDcolor_off != 'off' else 255 }} }
                                            {% elif LEDnumber == 'led 6' %}
                                              { "defaultLed6ColorWhenOff": {{ color_set[LEDcolor_off] if 'led' not in LEDnumber and LEDcolor_off != 'off' else 255 }} }
                                            {% elif LEDnumber == 'led 7' %}
                                              { "defaultLed7ColorWhenOff": {{ color_set[LEDcolor_off] if 'led' not in LEDnumber and LEDcolor_off != 'off' else 255 }} }
                                            {% endif %}

                ### ZHA ###
                - choose:
                    - conditions: "{{ repeat.item.call_type == 'zha' }}"
                      sequence:
                        - repeat:
                            for_each: "{{ repeat.item.entities }}"
                            sequence:
                              - choose:
                                  ### Configuring a color set for all LEDs ###
                                  - conditions: "{{ 'all' in LEDcolor_off and LEDnumber == 'all' }}"
                                    sequence:
                                      - variables:
                                          entity: "{{ repeat.item }}"
                                      - repeat:
                                          for_each:
                                            - "led 1"
                                            - "led 2"
                                            - "led 3"
                                            - "led 4"
                                            - "led 5"
                                            - "led 6"
                                            - "led 7"
                                            - "all"
                                          sequence:
                                            - service: zha.set_zigbee_cluster_attribute
                                              data:
                                                ieee: "{{ (device_attr( entity, 'identifiers') | list).0.1 }}"
                                                endpoint_id: 1
                                                cluster_id: 64561
                                                cluster_type: in
                                                attribute: >-
                                                  {% if repeat.item == 'all' %}
                                                    {{ 0x0060 |int }}
                                                  {% elif repeat.item == 'led 1' %}
                                                    {{ 0x003d |int }}
                                                  {% elif repeat.item == 'led 2' %}
                                                    {{ 0x0042 |int }}
                                                  {% elif repeat.item == 'led 3' %}
                                                    {{ 0x0047 |int }}
                                                  {% elif repeat.item == 'led 4' %}
                                                    {{ 0x004c |int }}
                                                  {% elif repeat.item == 'led 5' %}
                                                    {{ 0x0051 |int }}
                                                  {% elif repeat.item == 'led 6' %}
                                                    {{ 0x0056 |int }}
                                                  {% elif repeat.item == 'led 7' %}
                                                    {{ 0x005b |int }}
                                                  {% endif %}
                                                value: "{{ color_set[LEDcolor_off][repeat.item] }}"
                                                manufacturer: 4655
                                  ### Configuring just one LED or the full bar ###
                                  - conditions: "{{ 'all' not in LEDcolor_off and LEDcolor_off != 'no change' }}"
                                    sequence:
                                      - service: zha.set_zigbee_cluster_attribute
                                        data:
                                          ieee: "{{ (device_attr( repeat.item, 'identifiers') | list).0.1 }}"
                                          endpoint_id: 1
                                          cluster_id: 64561
                                          cluster_type: in
                                          attribute: >-
                                            {% if LEDnumber == 'all' %}
                                              {{ 0x0060 |int }}
                                            {% elif LEDnumber == 'led 1' %}
                                              {{ 0x003d |int }}
                                            {% elif LEDnumber == 'led 2' %}
                                              {{ 0x0042 |int }}
                                            {% elif LEDnumber == 'led 3' %}
                                              {{ 0x0047 |int }}
                                            {% elif LEDnumber == 'led 4' %}
                                              {{ 0x004c |int }}
                                            {% elif LEDnumber == 'led 5' %}
                                              {{ 0x0051 |int }}
                                            {% elif LEDnumber == 'led 6' %}
                                              {{ 0x0056 |int }}
                                            {% elif LEDnumber == 'led 7' %}
                                              {{ 0x005b |int }}
                                            {% endif %}
                                          ### Individual LEDs use 255 for 'off' while it's 'white' for the LED bar ###
                                          value: >-
                                            {% if 'led' in LEDnumber and LEDcolor_off == 'off' %}
                                              255
                                            {% else %}
                                              {{ color_set[LEDcolor_off] }}
                                            {% endif %}
                                          manufacturer: 4655


        ##################
        # LED strip brightness
        ##################
        - choose:
            - conditions: "{{ LEDbrightness is defined and LEDbrightness != 11 }} "
              sequence:

                ### Zwave JS ###
                ### Red Series can't set individual LEDs so we'll filter out color sets and force 'all' ###
                - choose:
                    - conditions: "{{ repeat.item.call_type == 'zwave_js' and 'all' in LEDnumber and 'all' not in LEDcolor and LEDnumber == 'all' }}"
                      sequence:
                        - service: zwave_js.set_config_parameter
                          data:
                            entity_id: "{{ repeat.item.entities }}"
                            parameter: >-
                              {% set effect_param = repeat.item.device_type + '_all' + '_ledbrightness' %}
                              {{ "off" if parameters[effect_param] == 0 else parameters[effect_param] }}
                            value: >-
                              {% if 'LZW' in repeat.item.device_type %}
                                {{ LEDbrightness | round(0) | int  }}
                              {% else %}
                                {{ (LEDbrightness * 10) | int }}
                              {% endif %}

                ### Zigbee2mqtt ###
                - choose:
                    - conditions: "{{ repeat.item.call_type == 'z2m' }}"
                      sequence:
                        - repeat:
                            for_each: |
                              {{ repeat.item.entities }}
                            sequence:
                              - choose:
                                  ### Configuring intensity for all LEDs ###
                                  - conditions: "{{ LEDbrightness != 11 and LEDnumber == 'all' and 'all' in LEDcolor }}"
                                    sequence:
                                      - variables:
                                          entity: "{{ repeat.item }}"
                                      - repeat:
                                          for_each:
                                            - "led 1"
                                            - "led 2"
                                            - "led 3"
                                            - "led 4"
                                            - "led 5"
                                            - "led 6"
                                            - "led 7"
                                            - "all"
                                          sequence:
                                            - service: mqtt.publish
                                              data:
                                                topic: >-
                                                  zigbee2mqtt/{{ states[entity].attributes.friendly_name }}/set
                                                payload: >-
                                                  {% if repeat.item == 'all' %}
                                                    { "ledIntensityWhenOn": {{ (LEDbrightness * 10) | int }} }
                                                  {% elif repeat.item == 'led 1' and 'all' in LEDcolor %}
                                                    { "defaultLed1IntensityWhenOn": {{ iif(LEDcolor == 'all clear',101,(LEDbrightness * 10)) | int }} }
                                                  {% elif repeat.item == 'led 2' and 'all' in LEDcolor %}
                                                    { "defaultLed2IntensityWhenOn": {{ iif(LEDcolor == 'all clear',101,(LEDbrightness * 10)) | int }} }
                                                  {% elif repeat.item == 'led 3' and 'all' in LEDcolor %}
                                                    { "defaultLed3IntensityWhenOn": {{ iif(LEDcolor == 'all clear',101,(LEDbrightness * 10)) | int }} }
                                                  {% elif repeat.item == 'led 4' and 'all' in LEDcolor %}
                                                    { "defaultLed4IntensityWhenOn": {{ iif(LEDcolor == 'all clear',101,(LEDbrightness * 10)) | int }} }
                                                  {% elif repeat.item == 'led 5' and 'all' in LEDcolor %}
                                                    { "defaultLed5IntensityWhenOn": {{ iif(LEDcolor == 'all clear',101,(LEDbrightness * 10)) | int }} }
                                                  {% elif repeat.item == 'led 6' and 'all' in LEDcolor %}
                                                    { "defaultLed6IntensityWhenOn": {{ iif(LEDcolor == 'all clear',101,(LEDbrightness * 10)) | int }} }
                                                  {% elif repeat.item == 'led 7' and 'all' in LEDcolor %}
                                                    { "defaultLed7IntensityWhenOn": {{ iif(LEDcolor == 'all clear',101,(LEDbrightness * 10)) | int }} }
                                                  {% endif %}
                                  ### Configuring just one LED or the full bar ###
                                  - conditions: "{{ LEDbrightness != 11 and LEDnumber != 'all' or 'all' not in LEDcolor }}"
                                    sequence:
                                      - service: mqtt.publish
                                        data:
                                          topic: >-
                                            zigbee2mqtt/{{ states[repeat.item].attributes.friendly_name }}/set
                                          payload: >-
                                            {% if LEDnumber == 'all' %}
                                              { "ledIntensityWhenOn": {{ (LEDbrightness * 10) | int }} }
                                            {% elif LEDnumber == 'led 1' %}
                                              { "defaultLed1IntensityWhenOn": {{ iif(LEDcolor == 'all clear',101,(LEDbrightness * 10)) | int }} }
                                            {% elif LEDnumber == 'led 2' %}
                                              { "defaultLed2IntensityWhenOn": {{ iif(LEDcolor == 'all clear',101,(LEDbrightness * 10)) | int }} }
                                            {% elif LEDnumber == 'led 3' %}
                                              { "defaultLed3IntensityWhenOn": {{ iif(LEDcolor == 'all clear',101,(LEDbrightness * 10)) | int }} }
                                            {% elif LEDnumber == 'led 4' %}
                                              { "defaultLed4IntensityWhenOn": {{ iif(LEDcolor == 'all clear',101,(LEDbrightness * 10)) | int }} }
                                            {% elif LEDnumber == 'led 5' %}
                                              { "defaultLed5IntensityWhenOn": {{ iif(LEDcolor == 'all clear',101,(LEDbrightness * 10)) | int }} }
                                            {% elif LEDnumber == 'led 6' %}
                                              { "defaultLed6IntensityWhenOn": {{ iif(LEDcolor == 'all clear',101,(LEDbrightness * 10)) | int }} }
                                            {% elif LEDnumber == 'led 7' %}
                                              { "defaultLed7IntensityWhenOn": {{ iif(LEDcolor == 'all clear',101,(LEDbrightness * 10)) | int }} }
                                            {% endif %}

                ### ZHA ###
                - choose:
                    - conditions: "{{ repeat.item.call_type == 'zha' }}"
                      sequence:
                        - repeat:
                            for_each: "{{ repeat.item.entities }}"
                            sequence:
                              - choose:
                                  ### Configuring a color set for all LEDs ###
                                  - conditions: "{{ LEDbrightness != 11 and LEDnumber == 'all' and 'all' in LEDcolor }}"
                                    sequence:
                                      - variables:
                                          entity: "{{ repeat.item }}"
                                      - repeat:
                                          for_each:
                                            - "led 1"
                                            - "led 2"
                                            - "led 3"
                                            - "led 4"
                                            - "led 5"
                                            - "led 6"
                                            - "led 7"
                                            - "all"
                                          sequence:
                                            - service: zha.set_zigbee_cluster_attribute
                                              data:
                                                ieee: "{{ (device_attr( entity, 'identifiers') | list).0.1 }}"
                                                endpoint_id: 1
                                                cluster_id: 64561
                                                cluster_type: in
                                                attribute: >-
                                                  {% if repeat.item == 'all' %}
                                                    {{ 0x0061 |int }}
                                                  {% elif repeat.item == 'led 1' %}
                                                    {{ 0x003e |int }}
                                                  {% elif repeat.item == 'led 2' %}
                                                    {{ 0x0043 |int }}
                                                  {% elif repeat.item == 'led 3' %}
                                                    {{ 0x0048 |int }}
                                                  {% elif repeat.item == 'led 4' %}
                                                    {{ 0x004d |int }}
                                                  {% elif repeat.item == 'led 5' %}
                                                    {{ 0x0052 |int }}
                                                  {% elif repeat.item == 'led 6' %}
                                                    {{ 0x0057 |int }}
                                                  {% elif repeat.item == 'led 7' %}
                                                    {{ 0x005c |int }}
                                                  {% endif %}
                                                value: "{{ iif(LEDcolor == 'all clear' and 'led' in repeat.item,101,(LEDbrightness * 10)) | int }}"
                                                manufacturer: 4655
                                  ### Configuring just one LED or the full bar ###
                                  - conditions: "{{ LEDbrightness != 11 and LEDnumber != 'all' or 'all' not in LEDcolor }}"
                                    sequence:
                                      - service: zha.set_zigbee_cluster_attribute
                                        data:
                                          ieee: "{{ (device_attr( repeat.item, 'identifiers') | list).0.1 }}"
                                          endpoint_id: 1
                                          cluster_id: 64561
                                          cluster_type: in
                                          attribute: >-
                                            {% if LEDnumber == 'all' %}
                                              {{ 0x0061 |int }}
                                            {% elif LEDnumber == 'led 1' %}
                                              {{ 0x003e |int }}
                                            {% elif LEDnumber == 'led 2' %}
                                              {{ 0x0043 |int }}
                                            {% elif LEDnumber == 'led 3' %}
                                              {{ 0x0048 |int }}
                                            {% elif LEDnumber == 'led 4' %}
                                              {{ 0x004d |int }}
                                            {% elif LEDnumber == 'led 5' %}
                                              {{ 0x0052 |int }}
                                            {% elif LEDnumber == 'led 6' %}
                                              {{ 0x0057 |int }}
                                            {% elif LEDnumber == 'led 7' %}
                                              {{ 0x005c |int }}
                                            {% endif %}
                                          value: "{{ iif(LEDcolor == 'all clear',101,(LEDbrightness * 10)) | int }}"
                                          manufacturer: 4655


        ##################
        # LED strip brightness when off
        ##################
        - choose:
            - conditions: "{{ LEDbrightness_off is defined and LEDbrightness_off != 11 }} "
              sequence:

                ### Zwave JS ###
                ### Red Series can't set individual LEDs so we'll filter out color sets and force 'all' ###
                - choose:
                    - conditions: "{{ repeat.item.call_type == 'zwave_js' and 'all' not in LEDcolor and LEDnumber == 'all' }}"
                      sequence:
                        - service: zwave_js.set_config_parameter
                          data:
                            entity_id: "{{ repeat.item.entities }}"
                            parameter: >-
                              {% set effect_param = repeat.item.device_type + '_all' + '_ledbrightness_off' %}
                              {{ "off" if parameters[effect_param] == 0 else parameters[effect_param] }}
                            value: >-
                              {% if 'LZW' in repeat.item.device_type %}
                                {{ LEDbrightness_off | round(0) | int  }}
                              {% else %}
                                {{ (LEDbrightness_off * 10) | int }}
                              {% endif %}

                ### Zigbee2mqtt ###
                - choose:
                    - conditions: "{{ repeat.item.call_type == 'z2m' }}"
                      sequence:
                        - repeat:
                            for_each: "{{ repeat.item.entities }} "
                            sequence:
                              - choose:
                                  ### Configuring intensity for all LEDs ###
                                  - conditions: "{{ LEDbrightness_off != 11 and LEDnumber == 'all' and 'all' in LEDcolor_off }}"
                                    sequence:
                                      - variables:
                                          entity: "{{ repeat.item }}"
                                      - repeat:
                                          for_each:
                                            - "led 1"
                                            - "led 2"
                                            - "led 3"
                                            - "led 4"
                                            - "led 5"
                                            - "led 6"
                                            - "led 7"
                                            - "all"
                                          sequence:
                                            - service: mqtt.publish
                                              data:
                                                topic: >-
                                                  zigbee2mqtt/{{ states[entity].attributes.friendly_name }}/set
                                                payload: >-
                                                  {% if repeat.item == 'all' %}
                                                    { "ledIntensityWhenOff": {{ (LEDbrightness_off * 10) | int }} }
                                                  {% elif repeat.item == 'led 1' and 'all' in LEDcolor_off %}
                                                    { "defaultLed1IntensityWhenOff": {{ iif(LEDcolor_off == 'all clear',101,(LEDbrightness_off * 10)) | int }} }
                                                  {% elif repeat.item == 'led 2' and 'all' in LEDcolor_off %}
                                                    { "defaultLed2IntensityWhenOff": {{ iif(LEDcolor_off == 'all clear',101,(LEDbrightness_off * 10)) | int }} }
                                                  {% elif repeat.item == 'led 3' and 'all' in LEDcolor_off %}
                                                    { "defaultLed3IntensityWhenOff": {{ iif(LEDcolor_off == 'all clear',101,(LEDbrightness_off * 10)) | int }} }
                                                  {% elif repeat.item == 'led 4' and 'all' in LEDcolor_off %}
                                                    { "defaultLed4IntensityWhenOff": {{ iif(LEDcolor_off == 'all clear',101,(LEDbrightness_off * 10)) | int }} }
                                                  {% elif repeat.item == 'led 5' and 'all' in LEDcolor_off %}
                                                    { "defaultLed5IntensityWhenOff": {{ iif(LEDcolor_off == 'all clear',101,(LEDbrightness_off * 10)) | int }} }
                                                  {% elif repeat.item == 'led 6' and 'all' in LEDcolor_off %}
                                                    { "defaultLed6IntensityWhenOff": {{ iif(LEDcolor_off == 'all clear',101,(LEDbrightness_off * 10)) | int }} }
                                                  {% elif repeat.item == 'led 7' and 'all' in LEDcolor_off %}
                                                    { "defaultLed7IntensityWhenOff": {{ iif(LEDcolor_off == 'all clear',101,(LEDbrightness_off * 10)) | int }} }
                                                  {% endif %}
                                  ### Configuring just one LED or the full bar ###
                                  - conditions: "{{ LEDbrightness_off != 11 and LEDnumber != 'all' or 'all' not in LEDcolor_off }}"
                                    sequence:
                                      - service: mqtt.publish
                                        data:
                                          topic: >-
                                            zigbee2mqtt/{{ states[repeat.item].attributes.friendly_name }}/set
                                          payload: >-
                                            {% if LEDnumber == 'all' %}
                                              { "ledIntensityWhenOff": {{ (LEDbrightness_off * 10) | int }} }
                                            {% elif LEDnumber == 'led 1' %}
                                              { "defaultLed1IntensityWhenOff": {{ iif(LEDcolor_off == 'all clear',101,(LEDbrightness_off * 10)) | int }} }
                                            {% elif LEDnumber == 'led 2' %}
                                              { "defaultLed2IntensityWhenOff": {{ iif(LEDcolor_off == 'all clear',101,(LEDbrightness_off * 10)) | int }} }
                                            {% elif LEDnumber == 'led 3' %}
                                              { "defaultLed3IntensityWhenOff": {{ iif(LEDcolor_off == 'all clear',101,(LEDbrightness_off * 10)) | int }} }
                                            {% elif LEDnumber == 'led 4' %}
                                              { "defaultLed4IntensityWhenOff": {{ iif(LEDcolor_off == 'all clear',101,(LEDbrightness_off * 10)) | int }} }
                                            {% elif LEDnumber == 'led 5' %}
                                              { "defaultLed5IntensityWhenOff": {{ iif(LEDcolor_off == 'all clear',101,(LEDbrightness_off * 10)) | int }} }
                                            {% elif LEDnumber == 'led 6' %}
                                              { "defaultLed6IntensityWhenOff": {{ iif(LEDcolor_off == 'all clear',101,(LEDbrightness_off * 10)) | int }} }
                                            {% elif LEDnumber == 'led 7' %}
                                              { "defaultLed7IntensityWhenOff": {{ iif(LEDcolor_off == 'all clear',101,(LEDbrightness_off * 10)) | int }} }
                                            {% endif %}

                ### ZHA ###
                - choose:
                    - conditions: "{{ repeat.item.call_type == 'zha' }}"
                      sequence:
                        - repeat:
                            for_each: "{{ repeat.item.entities }}"
                            sequence:
                              - choose:
                                    ### Configuring a color set for all LEDs ###
                                  - conditions: "{{ LEDbrightness_off != 11 and LEDnumber == 'all' and 'all' in LEDcolor_off }}"
                                    sequence:
                                      - variables:
                                          entity: "{{ repeat.item }}"
                                      - repeat:
                                          for_each:
                                            - "led 1"
                                            - "led 2"
                                            - "led 3"
                                            - "led 4"
                                            - "led 5"
                                            - "led 6"
                                            - "led 7"
                                            - "all"
                                          sequence:
                                            - service: zha.set_zigbee_cluster_attribute
                                              data:
                                                ieee: "{{ (device_attr( entity, 'identifiers') | list).0.1 }}"
                                                endpoint_id: 1
                                                cluster_id: 64561
                                                cluster_type: in
                                                attribute: >-
                                                  {% if repeat.item == 'all' %}
                                                    {{ 0x0062 |int }}
                                                  {% elif repeat.item == 'led 1' %}
                                                    {{ 0x003f |int }}
                                                  {% elif repeat.item == 'led 2' %}
                                                    {{ 0x0044 |int }}
                                                  {% elif repeat.item == 'led 3' %}
                                                    {{ 0x0049 |int }}
                                                  {% elif repeat.item == 'led 4' %}
                                                    {{ 0x004e |int }}
                                                  {% elif repeat.item == 'led 5' %}
                                                    {{ 0x0053 |int }}
                                                  {% elif repeat.item == 'led 6' %}
                                                    {{ 0x0058 |int }}
                                                  {% elif repeat.item == 'led 7' %}
                                                    {{ 0x005d |int }}
                                                  {% endif %}
                                                value: "{{ iif(LEDcolor_off == 'all clear' and 'led' in repeat.item,101,(LEDbrightness_off * 10)) | int }}"  
                                                manufacturer: 4655
                                    ### Configuring just one Color ###
                                  - conditions: "{{ LEDbrightness_off != 11 and LEDnumber != 'all' or 'all' not in LEDcolor_off }}"
                                    sequence:
                                      - service: zha.set_zigbee_cluster_attribute
                                        data:
                                          ieee: "{{ (device_attr( repeat.item, 'identifiers') | list).0.1 }}"
                                          endpoint_id: 1
                                          cluster_id: 64561
                                          cluster_type: in
                                          attribute: >-
                                            {% if LEDnumber == 'all' %}
                                              {{ 0x0062 |int }}
                                            {% elif LEDnumber == 'led 1' %}
                                              {{ 0x003f |int }}
                                            {% elif LEDnumber == 'led 2' %}
                                              {{ 0x0044 |int }}
                                            {% elif LEDnumber == 'led 3' %}
                                              {{ 0x0049 |int }}
                                            {% elif LEDnumber == 'led 4' %}
                                              {{ 0x004e |int }}
                                            {% elif LEDnumber == 'led 5' %}
                                              {{ 0x0053 |int }}
                                            {% elif LEDnumber == 'led 6' %}
                                              {{ 0x0058 |int }}
                                            {% elif LEDnumber == 'led 7' %}
                                              {{ 0x005d |int }}
                                            {% endif %}
                                          value: "{{ iif(LEDcolor_off == 'all clear',101,(LEDbrightness_off * 10)) | int }}"
                                          manufacturer: 4655


        #################
        # Effects (fully defined)
        # Calling a bulk set of parameters reduces Z-Wave traffic and writes to the switch's NVRAM, extending its life(?)
        ##################
        - choose:
            - conditions: >-
                {{ effect != "off" and effect != "clear effect" and color != "no change" and duration != 0 and brightness != 11 and
                   repeat.item.device_type != 'LZW30' and repeat.item.device_type != 'LZW31' }}
              sequence:

                ### Zwave JS
                ### Red 500 Series ###
                - choose:
                    - conditions: "{{ repeat.item.call_type == 'zwave_js' and 'VZW' not in repeat.item.device_type and 
                                      repeat.item.device_type != 'LZW30' and repeat.item.device_type != 'LZW31' and 
                                      'all' in LEDnumber and 'all' not in LEDcolor }}"
                      sequence:
                        - service: zwave_js.bulk_set_partial_config_parameters
                          data:
                            entity_id: "{{ repeat.item.entities }}"
                            parameter: >-
                              {% set bulk_param = repeat.item.device_type + '_' + LEDnumber + '_effect_bulk' %}
                              {{ parameters[bulk_param] }}
                            value: >-
                              {% if repeat.item.device_type == "LZW30SN" %}
                                {{ color_set[color] + ((brightness | round(0) | int) * 256) + (duration_values[duration] * 65536) + (LZW30SN_effects[effect] * 16777216) }}
                              {% elif repeat.item.device_type == "LZW31SN" %}
                                {{ color_set[color] + ((brightness | round(0) | int) * 256) + (duration_values[duration] * 65536) + (LZW31SN_effects[effect] * 16777216) }}
                              {% elif repeat.item.device_type == "LZW36_light" %}
                                {{ color_set[color] + ((brightness | round(0) | int) * 256) + (duration_values[duration] * 65536) + (LZW36_light_effects[effect] * 16777216) }}
                              {% elif repeat.item.device_type == "LZW36_fan" %}
                                {{ color_set[color] + ((brightness | round(0) | int) * 256) + (duration_values[duration] * 65536) + (LZW36_fan_effects[effect] * 16777216) }}
                              {% endif %}

                ### Red 800 Series ###
                - choose:
                    - conditions: "{{ repeat.item.call_type == 'zwave_js' and 'VZW' in repeat.item.device_type and 'all' in LEDnumber and 'all' not in LEDcolor }}"
                      sequence:
                        - service: zwave_js.bulk_set_partial_config_parameters
                          data:
                            entity_id: "{{ repeat.item.entities }}"
                            parameter: >-
                              {% set bulk_param = repeat.item.device_type + '_' + LEDnumber + '_effect_bulk' %}
                              {{ parameters[bulk_param] }}
                            value: "{{ (color_set[color] * 65536) + (brightness * 10 * 256) + (duration_values[duration]) + (VZW31SN_effects[effect] * 16777216) }}"

                ### Zigbee2mqtt ###
                - choose:
                    - conditions: "{{ repeat.item.call_type == 'z2m' and 'all' not in LEDcolor }}"
                      sequence:
                        - variables:
                            effects: "{{ repeat.item.effects }}"
                        - repeat:
                            for_each: "{{ repeat.item.entities }}"
                            sequence:
                              - service: mqtt.publish
                                data:
                                  topic: >-
                                    zigbee2mqtt/{{ states[repeat.item].attributes.friendly_name }}/set
                                  payload: >-
                                    {"led_effect":{"color":"{{ color_set[color] }}","duration":"{{ duration_values[duration] }}","effect":"{{ effects }}","level":"{{ (brightness * 256 / 10) | int }}" }}

                ### ZHA ###
                - choose:
                    - conditions: "{{ repeat.item.call_type == 'zha' and 'all' not in LEDcolor }}"
                      sequence:
                        - variables:
                            effects: "{{ repeat.item.effects }}"
                        - repeat:
                            for_each: "{{ repeat.item.entities }} "
                            sequence:
                              - service: zha.issue_zigbee_cluster_command
                                data:
                                  ieee: "{{ (device_attr(repeat.item, 'identifiers')|list).0.1 }}"
                                  endpoint_id: 1
                                  cluster_id: 64561
                                  cluster_type: in
                                  command: "{{ iif('all' in LEDnumber,1,3) }}"
                                  command_type: server
                                  params: {"led_number":"{{ led_map[LEDnumber]|int }}","led_color":"{{ color_set[color] }}","led_duration":"{{ duration_values[duration] }}","led_effect":"{{ effects }}","led_level":"{{ (brightness * 10 | int) }}"}
                                  manufacturer: 4655

          default:
            ##################
            # Default will be to clear the effect and set the duration to 1 second.
            # This way, "forever" effects can be set, then easily cleared.
            # It's also a safer way to fail since the worst case scenario is that an effect is cleared.
            # Setting only the effect to "off" turned the LED off on LZW36 fan / light combos for the duration (which could be "forever").
            #    This way it turns off for 1 sec before it returns to its default state, but until the min value for effect changes to 0 in the DB, that's the best I can do.
            ##################

            ### Zwave JS ###
            - choose:

                ### Red 500 Series ###
                - conditions: "{{ repeat.item.call_type == 'zwave_js' and repeat.item.device_type != 'LZW30' and repeat.item.device_type != 'LZW31' and 'all' in LEDnumber }}"
                  sequence:
                    - service: zwave_js.set_config_parameter
                      data:
                        entity_id: "{{ repeat.item.entities }}"
                        parameter: >-
                          {% set effect_param = repeat.item.device_type + '_' + LEDnumber + '_effect_effect' %}
                          {{ parameters[effect_param] }}
                        value: >-
                          {% if repeat.item.device_type == "LZW30SN" %}
                            0
                          {% else %}
                            255
                          {% endif %}
                    - service: zwave_js.set_config_parameter
                      data:
                        entity_id: "{{ repeat.item.entities }}"
                        parameter: >-
                          {% set effect_param = repeat.item.device_type + '_' + LEDnumber + '_effect_duration' %}
                          {{ parameters[effect_param] }}
                        value: 0

                ### Red 800 Series ###
                - conditions: "{{ repeat.item.call_type == 'zwave_js' and 'VZW' in repeat.item.device_type }}"
                  sequence:
                    - variables:
                        effects: "{{ repeat.item.effects }}"
                    - service: zwave_js.set_config_parameter
                      data:
                        entity_id: "{{ repeat.item.entities }}"
                        parameter: >-
                          {% set effect_param = repeat.item.device_type + '_' + LEDnumber + '_effect_effect' %}
                          {{ parameters[effect_param] }}
                        value: "{{ effects }}"
                    - service: zwave_js.set_config_parameter
                      data:
                        entity_id: "{{ repeat.item.entities }}"
                        parameter: >-
                          {% set effect_param = repeat.item.device_type + '_' + LEDnumber + '_effect_duration' %}
                          {{ parameters[effect_param] }}
                        value: "{{ duration_values[duration] }}"

            ### Zigbee2mqtt ###
            - choose:
                - conditions: "{{ repeat.item.call_type == 'z2m' }}"
                  sequence:
                    - variables:
                        effects: "{{ repeat.item.effects }}"
                    - repeat:
                        for_each: "{{ repeat.item.entities }} "
                        sequence:
                          - service: mqtt.publish
                            data:
                              topic: >-
                                zigbee2mqtt/{{ states[repeat.item].attributes.friendly_name }}/set
                              payload: >-
                                {"led_effect":{"duration":"{{duration_values[duration]}}","effect":"{{effects}}" }}

            ### ZHA ###
            - choose:
                - conditions: "{{ repeat.item.call_type == 'zha' }}"
                  sequence:
                    - variables:
                        effects: "{{ repeat.item.effects }}"
                    - repeat:
                        for_each: "{{ repeat.item.entities }} "
                        sequence:
                          - service: zha.issue_zigbee_cluster_command
                            data:
                              ieee: "{{ (device_attr(repeat.item, 'identifiers')|list).0.1 }}"
                              endpoint_id: 1
                              cluster_id: 64561
                              cluster_type: in
                              command: 1
                              command_type: server
                              params: {'led_number': -1, 'led_effect': '{{effects}}', 'led_color': 0, 'led_level': 0, 'led_duration': '{{duration_values[duration]}}' }
                              manufacturer: 4655
